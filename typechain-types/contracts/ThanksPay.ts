/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ThanksPayInterface extends utils.Interface {
  functions: {
    "companyPools(address)": FunctionFragment;
    "partnerTransaction(uint256,address,address,uint256,string)": FunctionFragment;
    "registerPartner(address,uint256)": FunctionFragment;
    "registerWorker(address,address,uint256)": FunctionFragment;
    "workerTransaction(address,address,uint256,string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "companyPools"
      | "partnerTransaction"
      | "registerPartner"
      | "registerWorker"
      | "workerTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "companyPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "partnerTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPartner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWorker",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "workerTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "companyPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerTransaction",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ThanksPay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThanksPayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    companyPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    partnerTransaction(
      addRemove: PromiseOrValue<BigNumberish>,
      company: PromiseOrValue<string>,
      pledger: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workerTransaction(
      worker: PromiseOrValue<string>,
      company: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  companyPools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  partnerTransaction(
    addRemove: PromiseOrValue<BigNumberish>,
    company: PromiseOrValue<string>,
    pledger: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    bankReceipt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPartner(
    pId: PromiseOrValue<string>,
    latestPay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerWorker(
    wId: PromiseOrValue<string>,
    pId: PromiseOrValue<string>,
    wage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workerTransaction(
    worker: PromiseOrValue<string>,
    company: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    bankReceipt: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    companyPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partnerTransaction(
      addRemove: PromiseOrValue<BigNumberish>,
      company: PromiseOrValue<string>,
      pledger: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    workerTransaction(
      worker: PromiseOrValue<string>,
      company: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    companyPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partnerTransaction(
      addRemove: PromiseOrValue<BigNumberish>,
      company: PromiseOrValue<string>,
      pledger: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workerTransaction(
      worker: PromiseOrValue<string>,
      company: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    companyPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partnerTransaction(
      addRemove: PromiseOrValue<BigNumberish>,
      company: PromiseOrValue<string>,
      pledger: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workerTransaction(
      worker: PromiseOrValue<string>,
      company: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
