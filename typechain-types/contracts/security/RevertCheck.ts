/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface RevertCheckInterface extends utils.Interface {
  functions: {
    "revertCheck(bool)": FunctionFragment;
    "revertCheck(bool,string)": FunctionFragment;
    "revertCheck(bool,uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "revertCheck(bool)"
      | "revertCheck(bool,string)"
      | "revertCheck(bool,uint16)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "revertCheck(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertCheck(bool,string)",
    values: [PromiseOrValue<boolean>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertCheck(bool,uint16)",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "revertCheck(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertCheck(bool,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertCheck(bool,uint16)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RevertCheck extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RevertCheckInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "revertCheck(bool)"(
      condition: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "revertCheck(bool,string)"(
      condition: PromiseOrValue<boolean>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "revertCheck(bool,uint16)"(
      condition: PromiseOrValue<boolean>,
      exitCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  "revertCheck(bool)"(
    condition: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  "revertCheck(bool,string)"(
    condition: PromiseOrValue<boolean>,
    reason: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  "revertCheck(bool,uint16)"(
    condition: PromiseOrValue<boolean>,
    exitCode: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    "revertCheck(bool)"(
      condition: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertCheck(bool,string)"(
      condition: PromiseOrValue<boolean>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertCheck(bool,uint16)"(
      condition: PromiseOrValue<boolean>,
      exitCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "revertCheck(bool)"(
      condition: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revertCheck(bool,string)"(
      condition: PromiseOrValue<boolean>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revertCheck(bool,uint16)"(
      condition: PromiseOrValue<boolean>,
      exitCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "revertCheck(bool)"(
      condition: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revertCheck(bool,string)"(
      condition: PromiseOrValue<boolean>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revertCheck(bool,uint16)"(
      condition: PromiseOrValue<boolean>,
      exitCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
