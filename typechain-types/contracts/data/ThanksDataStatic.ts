/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ThanksDataStaticInterface extends utils.Interface {
  functions: {
    "partners(uint256)": FunctionFragment;
    "types(uint256)": FunctionFragment;
    "workers(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "partners" | "types" | "workers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "partners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "types",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "workers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "partners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "types", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;

  events: {
    "companyRegistered(uint256,uint256)": EventFragment;
    "partnerBalanceChanged(uint256,uint256)": EventFragment;
    "partnerRegistered(uint256,uint256)": EventFragment;
    "workerBalanceChanged(uint256,uint256)": EventFragment;
    "workerRegistered(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "companyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "partnerBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "partnerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "workerBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "workerRegistered"): EventFragment;
}

export interface companyRegisteredEventObject {
  pId: BigNumber;
  latestPay: BigNumber;
}
export type companyRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber],
  companyRegisteredEventObject
>;

export type companyRegisteredEventFilter =
  TypedEventFilter<companyRegisteredEvent>;

export interface partnerBalanceChangedEventObject {
  pId: BigNumber;
  newBalance: BigNumber;
}
export type partnerBalanceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  partnerBalanceChangedEventObject
>;

export type partnerBalanceChangedEventFilter =
  TypedEventFilter<partnerBalanceChangedEvent>;

export interface partnerRegisteredEventObject {
  pId: BigNumber;
  latestPay: BigNumber;
}
export type partnerRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber],
  partnerRegisteredEventObject
>;

export type partnerRegisteredEventFilter =
  TypedEventFilter<partnerRegisteredEvent>;

export interface workerBalanceChangedEventObject {
  wId: BigNumber;
  newBalance: BigNumber;
}
export type workerBalanceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  workerBalanceChangedEventObject
>;

export type workerBalanceChangedEventFilter =
  TypedEventFilter<workerBalanceChangedEvent>;

export interface workerRegisteredEventObject {
  wId: BigNumber;
  pId: BigNumber;
  wage: BigNumber;
}
export type workerRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  workerRegisteredEventObject
>;

export type workerRegisteredEventFilter =
  TypedEventFilter<workerRegisteredEvent>;

export interface ThanksDataStatic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThanksDataStaticInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        bonus: BigNumber;
        latestPay: BigNumber;
      }
    >;

    types(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        wage: BigNumber;
        pId: BigNumber;
        latestRequest: BigNumber;
      }
    >;
  };

  partners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      bonus: BigNumber;
      latestPay: BigNumber;
    }
  >;

  types(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      wage: BigNumber;
      pId: BigNumber;
      latestRequest: BigNumber;
    }
  >;

  callStatic: {
    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        bonus: BigNumber;
        latestPay: BigNumber;
      }
    >;

    types(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        wage: BigNumber;
        pId: BigNumber;
        latestRequest: BigNumber;
      }
    >;
  };

  filters: {
    "companyRegistered(uint256,uint256)"(
      pId?: null,
      latestPay?: null
    ): companyRegisteredEventFilter;
    companyRegistered(
      pId?: null,
      latestPay?: null
    ): companyRegisteredEventFilter;

    "partnerBalanceChanged(uint256,uint256)"(
      pId?: null,
      newBalance?: null
    ): partnerBalanceChangedEventFilter;
    partnerBalanceChanged(
      pId?: null,
      newBalance?: null
    ): partnerBalanceChangedEventFilter;

    "partnerRegistered(uint256,uint256)"(
      pId?: null,
      latestPay?: null
    ): partnerRegisteredEventFilter;
    partnerRegistered(
      pId?: null,
      latestPay?: null
    ): partnerRegisteredEventFilter;

    "workerBalanceChanged(uint256,uint256)"(
      wId?: null,
      newBalance?: null
    ): workerBalanceChangedEventFilter;
    workerBalanceChanged(
      wId?: null,
      newBalance?: null
    ): workerBalanceChangedEventFilter;

    "workerRegistered(uint256,uint256,uint256)"(
      wId?: null,
      pId?: null,
      wage?: null
    ): workerRegisteredEventFilter;
    workerRegistered(
      wId?: null,
      pId?: null,
      wage?: null
    ): workerRegisteredEventFilter;
  };

  estimateGas: {
    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    types(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    partners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    types(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
