/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ThanksPayDataInterface extends utils.Interface {
  functions: {
    "companies(address)": FunctionFragment;
    "getPartnerBalance(address)": FunctionFragment;
    "getWorkerBalance(uint256,address)": FunctionFragment;
    "partners(address)": FunctionFragment;
    "readCompany(address)": FunctionFragment;
    "readPartner(address)": FunctionFragment;
    "readWorker(address)": FunctionFragment;
    "registerPartner(address,uint256)": FunctionFragment;
    "registerWorker(address,address,uint256)": FunctionFragment;
    "setCompanyBalance(address,uint256)": FunctionFragment;
    "setLatestRequest(address,uint256)": FunctionFragment;
    "setLatestWagePay(address,uint256)": FunctionFragment;
    "setPartnerBalance(address,uint256)": FunctionFragment;
    "setWorkerBalance(uint256,address,uint256)": FunctionFragment;
    "types(address)": FunctionFragment;
    "viewCompanyBalance(address)": FunctionFragment;
    "viewPartnerBalance(address)": FunctionFragment;
    "viewWorkerBalance(uint256)": FunctionFragment;
    "workers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "companies"
      | "getPartnerBalance"
      | "getWorkerBalance"
      | "partners"
      | "readCompany"
      | "readPartner"
      | "readWorker"
      | "registerPartner"
      | "registerWorker"
      | "setCompanyBalance"
      | "setLatestRequest"
      | "setLatestWagePay"
      | "setPartnerBalance"
      | "setWorkerBalance"
      | "types"
      | "viewCompanyBalance"
      | "viewPartnerBalance"
      | "viewWorkerBalance"
      | "workers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "companies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartnerBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkerBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "partners",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readCompany",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readWorker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPartner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWorker",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompanyBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestWagePay",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkerBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "types",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCompanyBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPartnerBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewWorkerBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "workers",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "companies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "partners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompanyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestWagePay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "types", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewCompanyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPartnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewWorkerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;

  events: {
    "companyRegistered(address,uint256)": EventFragment;
    "partnerBalanceChanged(address,uint256)": EventFragment;
    "partnerRegistered(address,uint256)": EventFragment;
    "workerBalanceChanged(uint256,address,uint256)": EventFragment;
    "workerRegistered(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "companyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "partnerBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "partnerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "workerBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "workerRegistered"): EventFragment;
}

export interface companyRegisteredEventObject {
  pId: string;
  latestPay: BigNumber;
}
export type companyRegisteredEvent = TypedEvent<
  [string, BigNumber],
  companyRegisteredEventObject
>;

export type companyRegisteredEventFilter =
  TypedEventFilter<companyRegisteredEvent>;

export interface partnerBalanceChangedEventObject {
  pId: string;
  newBalance: BigNumber;
}
export type partnerBalanceChangedEvent = TypedEvent<
  [string, BigNumber],
  partnerBalanceChangedEventObject
>;

export type partnerBalanceChangedEventFilter =
  TypedEventFilter<partnerBalanceChangedEvent>;

export interface partnerRegisteredEventObject {
  pId: string;
  latestPay: BigNumber;
}
export type partnerRegisteredEvent = TypedEvent<
  [string, BigNumber],
  partnerRegisteredEventObject
>;

export type partnerRegisteredEventFilter =
  TypedEventFilter<partnerRegisteredEvent>;

export interface workerBalanceChangedEventObject {
  kind: BigNumber;
  wId: string;
  newBalance: BigNumber;
}
export type workerBalanceChangedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  workerBalanceChangedEventObject
>;

export type workerBalanceChangedEventFilter =
  TypedEventFilter<workerBalanceChangedEvent>;

export interface workerRegisteredEventObject {
  wId: string;
  pId: string;
  wage: BigNumber;
}
export type workerRegisteredEvent = TypedEvent<
  [string, string, BigNumber],
  workerRegisteredEventObject
>;

export type workerRegisteredEventFilter =
  TypedEventFilter<workerRegisteredEvent>;

export interface ThanksPayData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThanksPayDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    companies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getPartnerBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    partners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; latestPay: BigNumber }
    >;

    readCompany(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    readPartner(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; latestPay: BigNumber }
    >;

    readWorker(
      wId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        balance: BigNumber;
        saving: BigNumber;
        borrow: BigNumber;
        wage: BigNumber;
        pId: string;
        latestRequest: BigNumber;
      }
    >;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCompanyBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLatestRequest(
      wId: PromiseOrValue<string>,
      latestRequest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLatestWagePay(
      pId: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartnerBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      wId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    types(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewCompanyBalance(
      company: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewPartnerBalance(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewWorkerBalance(
      worker: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        balance: BigNumber;
        saving: BigNumber;
        borrow: BigNumber;
        wage: BigNumber;
        pId: string;
        latestRequest: BigNumber;
      }
    >;
  };

  companies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartnerBalance(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWorkerBalance(
    kind: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  partners(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; latestPay: BigNumber }
  >;

  readCompany(
    pId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readPartner(
    pId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; latestPay: BigNumber }
  >;

  readWorker(
    wId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      balance: BigNumber;
      saving: BigNumber;
      borrow: BigNumber;
      wage: BigNumber;
      pId: string;
      latestRequest: BigNumber;
    }
  >;

  registerPartner(
    pId: PromiseOrValue<string>,
    latestPay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerWorker(
    wId: PromiseOrValue<string>,
    pId: PromiseOrValue<string>,
    wage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCompanyBalance(
    pId: PromiseOrValue<string>,
    newBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLatestRequest(
    wId: PromiseOrValue<string>,
    latestRequest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLatestWagePay(
    pId: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartnerBalance(
    pId: PromiseOrValue<string>,
    newBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWorkerBalance(
    kind: PromiseOrValue<BigNumberish>,
    wId: PromiseOrValue<string>,
    newBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  types(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewCompanyBalance(
    company: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewPartnerBalance(
    partner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewWorkerBalance(
    worker: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      balance: BigNumber;
      saving: BigNumber;
      borrow: BigNumber;
      wage: BigNumber;
      pId: string;
      latestRequest: BigNumber;
    }
  >;

  callStatic: {
    companies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartnerBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; latestPay: BigNumber }
    >;

    readCompany(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readPartner(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; latestPay: BigNumber }
    >;

    readWorker(
      wId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        balance: BigNumber;
        saving: BigNumber;
        borrow: BigNumber;
        wage: BigNumber;
        pId: string;
        latestRequest: BigNumber;
      }
    >;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompanyBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestRequest(
      wId: PromiseOrValue<string>,
      latestRequest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestWagePay(
      pId: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnerBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      wId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    types(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCompanyBalance(
      company: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPartnerBalance(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewWorkerBalance(
      worker: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        balance: BigNumber;
        saving: BigNumber;
        borrow: BigNumber;
        wage: BigNumber;
        pId: string;
        latestRequest: BigNumber;
      }
    >;
  };

  filters: {
    "companyRegistered(address,uint256)"(
      pId?: null,
      latestPay?: null
    ): companyRegisteredEventFilter;
    companyRegistered(
      pId?: null,
      latestPay?: null
    ): companyRegisteredEventFilter;

    "partnerBalanceChanged(address,uint256)"(
      pId?: null,
      newBalance?: null
    ): partnerBalanceChangedEventFilter;
    partnerBalanceChanged(
      pId?: null,
      newBalance?: null
    ): partnerBalanceChangedEventFilter;

    "partnerRegistered(address,uint256)"(
      pId?: null,
      latestPay?: null
    ): partnerRegisteredEventFilter;
    partnerRegistered(
      pId?: null,
      latestPay?: null
    ): partnerRegisteredEventFilter;

    "workerBalanceChanged(uint256,address,uint256)"(
      kind?: null,
      wId?: null,
      newBalance?: null
    ): workerBalanceChangedEventFilter;
    workerBalanceChanged(
      kind?: null,
      wId?: null,
      newBalance?: null
    ): workerBalanceChangedEventFilter;

    "workerRegistered(address,address,uint256)"(
      wId?: null,
      pId?: null,
      wage?: null
    ): workerRegisteredEventFilter;
    workerRegistered(
      wId?: null,
      pId?: null,
      wage?: null
    ): workerRegisteredEventFilter;
  };

  estimateGas: {
    companies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartnerBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readCompany(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readPartner(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readWorker(
      wId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCompanyBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLatestRequest(
      wId: PromiseOrValue<string>,
      latestRequest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLatestWagePay(
      pId: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartnerBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      wId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    types(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCompanyBalance(
      company: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPartnerBalance(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewWorkerBalance(
      worker: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    companies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartnerBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readCompany(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readPartner(
      pId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readWorker(
      wId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPartner(
      pId: PromiseOrValue<string>,
      latestPay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerWorker(
      wId: PromiseOrValue<string>,
      pId: PromiseOrValue<string>,
      wage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCompanyBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLatestRequest(
      wId: PromiseOrValue<string>,
      latestRequest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLatestWagePay(
      pId: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartnerBalance(
      pId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWorkerBalance(
      kind: PromiseOrValue<BigNumberish>,
      wId: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    types(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewCompanyBalance(
      company: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewPartnerBalance(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewWorkerBalance(
      worker: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
