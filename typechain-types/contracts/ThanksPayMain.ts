/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ThanksPayMainInterface extends utils.Interface {
  functions: {
    "partnerAddBalance(uint256,uint256)": FunctionFragment;
    "partnerAddBonus(uint256,uint256)": FunctionFragment;
    "partnerWithdraw(uint256,uint256)": FunctionFragment;
    "setLatestWagePay(uint256,uint256)": FunctionFragment;
    "subtractFromPartner(uint256,uint256)": FunctionFragment;
    "workerGetsThanksPay(uint256,uint256,uint256,string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "partnerAddBalance"
      | "partnerAddBonus"
      | "partnerWithdraw"
      | "setLatestWagePay"
      | "subtractFromPartner"
      | "workerGetsThanksPay"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "partnerAddBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partnerAddBonus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partnerWithdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestWagePay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subtractFromPartner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "workerGetsThanksPay",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "partnerAddBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerAddBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestWagePay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subtractFromPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerGetsThanksPay",
    data: BytesLike
  ): Result;

  events: {
    "partnerGotBonus(uint256,uint256)": EventFragment;
    "workerGotThanksPay(uint256,uint256,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "partnerGotBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "workerGotThanksPay"): EventFragment;
}

export interface partnerGotBonusEventObject {
  pId: BigNumber;
  amount: BigNumber;
}
export type partnerGotBonusEvent = TypedEvent<
  [BigNumber, BigNumber],
  partnerGotBonusEventObject
>;

export type partnerGotBonusEventFilter = TypedEventFilter<partnerGotBonusEvent>;

export interface workerGotThanksPayEventObject {
  wId: BigNumber;
  pId: BigNumber;
  amount: BigNumber;
  bankReceipt: string;
  timestamp: BigNumber;
}
export type workerGotThanksPayEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  workerGotThanksPayEventObject
>;

export type workerGotThanksPayEventFilter =
  TypedEventFilter<workerGotThanksPayEvent>;

export interface ThanksPayMain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThanksPayMainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    partnerAddBalance(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partnerAddBonus(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partnerWithdraw(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLatestWagePay(
      pId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subtractFromPartner(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workerGetsThanksPay(
      wId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  partnerAddBalance(
    pId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partnerAddBonus(
    pId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partnerWithdraw(
    pId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLatestWagePay(
    pId: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subtractFromPartner(
    pId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workerGetsThanksPay(
    wId: PromiseOrValue<BigNumberish>,
    pId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    bankReceipt: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    partnerAddBalance(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    partnerAddBonus(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    partnerWithdraw(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestWagePay(
      pId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subtractFromPartner(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    workerGetsThanksPay(
      wId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "partnerGotBonus(uint256,uint256)"(
      pId?: null,
      amount?: null
    ): partnerGotBonusEventFilter;
    partnerGotBonus(pId?: null, amount?: null): partnerGotBonusEventFilter;

    "workerGotThanksPay(uint256,uint256,uint256,string,uint256)"(
      wId?: null,
      pId?: null,
      amount?: null,
      bankReceipt?: null,
      timestamp?: null
    ): workerGotThanksPayEventFilter;
    workerGotThanksPay(
      wId?: null,
      pId?: null,
      amount?: null,
      bankReceipt?: null,
      timestamp?: null
    ): workerGotThanksPayEventFilter;
  };

  estimateGas: {
    partnerAddBalance(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partnerAddBonus(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partnerWithdraw(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLatestWagePay(
      pId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subtractFromPartner(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workerGetsThanksPay(
      wId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    partnerAddBalance(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partnerAddBonus(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partnerWithdraw(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLatestWagePay(
      pId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subtractFromPartner(
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workerGetsThanksPay(
      wId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      bankReceipt: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
