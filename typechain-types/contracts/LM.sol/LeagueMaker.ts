/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface LeagueMakerInterface extends utils.Interface {
  functions: {
    "blockPlayers(uint256,string[])": FunctionFragment;
    "blockUsers(address[])": FunctionFragment;
    "editLeague(uint256,string,uint256,uint256,uint256,string[],string[])": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "joinLeague(uint256,string)": FunctionFragment;
    "kickPlayers(uint256,string[])": FunctionFragment;
    "lastLeagueId()": FunctionFragment;
    "makeCancelledLeague(uint256)": FunctionFragment;
    "makeDoneLeague(uint256,string[])": FunctionFragment;
    "makePlayingLeague(uint256)": FunctionFragment;
    "makeWaitingLeague(string,uint256,uint256,uint256,uint256,uint256,string[],string[])": FunctionFragment;
    "setAdminState(address,uint256,string)": FunctionFragment;
    "unblockPlayers(uint256,string[])": FunctionFragment;
    "unblockUsers(address[])": FunctionFragment;
    "withdrawAsAdmin(address,uint256,string)": FunctionFragment;
    "withdrawRewards(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockPlayers"
      | "blockUsers"
      | "editLeague"
      | "getContractBalance"
      | "joinLeague"
      | "kickPlayers"
      | "lastLeagueId"
      | "makeCancelledLeague"
      | "makeDoneLeague"
      | "makePlayingLeague"
      | "makeWaitingLeague"
      | "setAdminState"
      | "unblockPlayers"
      | "unblockUsers"
      | "withdrawAsAdmin"
      | "withdrawRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blockPlayers",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockUsers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "editLeague",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinLeague",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "kickPlayers",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLeagueId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeCancelledLeague",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeDoneLeague",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makePlayingLeague",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeWaitingLeague",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminState",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockPlayers",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockUsers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsAdmin",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editLeague", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinLeague", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLeagueId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeCancelledLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeDoneLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePlayingLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeWaitingLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "blockPlayerEvent(uint256,string)": EventFragment;
    "blockUsersEvent(address[])": EventFragment;
    "createUserEvent(address,uint256,string,uint256)": EventFragment;
    "editLeagueEvent(uint256,string,uint256,uint256,uint256,string[],string[])": EventFragment;
    "kickPlayersEvent(uint256,string[])": EventFragment;
    "leagueIsCancelledEvent(uint256,uint256,address)": EventFragment;
    "leagueIsDoneEvent(uint256,uint256,string[],uint256,address)": EventFragment;
    "leagueIsPlayingEvent(uint256,uint256,address)": EventFragment;
    "leagueIsWaitingEvent(uint256,string,uint256,uint256,uint256,uint256,address,uint256,uint256,string[],string[])": EventFragment;
    "leagueJoined(uint256,uint256,address,string,bool,uint256)": EventFragment;
    "prizeClaimed(uint256,uint256,address,string,uint256)": EventFragment;
    "setAdminStateEvent(address,uint256,string,uint256)": EventFragment;
    "unblockPlayerEvent(uint256,string)": EventFragment;
    "unblockUsersEvent(address[])": EventFragment;
    "updateContractBalanceEvent(uint256,uint256)": EventFragment;
    "updateUserEvent(address,uint256,string,bool)": EventFragment;
    "withdrawAsAdminEvent(uint256,address,address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "blockPlayerEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "blockUsersEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "createUserEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "editLeagueEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "kickPlayersEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueIsCancelledEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueIsDoneEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueIsPlayingEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueIsWaitingEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leagueJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "prizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setAdminStateEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "unblockPlayerEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "unblockUsersEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateContractBalanceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateUserEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawAsAdminEvent"): EventFragment;
}

export interface blockPlayerEventEventObject {
  _leagueId: BigNumber;
  _name: string;
}
export type blockPlayerEventEvent = TypedEvent<
  [BigNumber, string],
  blockPlayerEventEventObject
>;

export type blockPlayerEventEventFilter =
  TypedEventFilter<blockPlayerEventEvent>;

export interface blockUsersEventEventObject {
  _userAddrs: string[];
}
export type blockUsersEventEvent = TypedEvent<
  [string[]],
  blockUsersEventEventObject
>;

export type blockUsersEventEventFilter = TypedEventFilter<blockUsersEventEvent>;

export interface createUserEventEventObject {
  _userAddr: string;
  _state: BigNumber;
  _name: string;
  _time: BigNumber;
}
export type createUserEventEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  createUserEventEventObject
>;

export type createUserEventEventFilter = TypedEventFilter<createUserEventEvent>;

export interface editLeagueEventEventObject {
  _leagueId: BigNumber;
  _gameName: string;
  _liveTime: BigNumber;
  _closeTime: BigNumber;
  _maxPlayer: BigNumber;
  _winConds: string[];
  _winCondOps: string[];
}
export type editLeagueEventEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string[], string[]],
  editLeagueEventEventObject
>;

export type editLeagueEventEventFilter = TypedEventFilter<editLeagueEventEvent>;

export interface kickPlayersEventEventObject {
  _leagueId: BigNumber;
  _names: string[];
}
export type kickPlayersEventEvent = TypedEvent<
  [BigNumber, string[]],
  kickPlayersEventEventObject
>;

export type kickPlayersEventEventFilter =
  TypedEventFilter<kickPlayersEventEvent>;

export interface leagueIsCancelledEventEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _byAdmin: string;
}
export type leagueIsCancelledEventEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  leagueIsCancelledEventEventObject
>;

export type leagueIsCancelledEventEventFilter =
  TypedEventFilter<leagueIsCancelledEventEvent>;

export interface leagueIsDoneEventEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _winners: string[];
  _prizePerParticipant: BigNumber;
  _byAdmin: string;
}
export type leagueIsDoneEventEvent = TypedEvent<
  [BigNumber, BigNumber, string[], BigNumber, string],
  leagueIsDoneEventEventObject
>;

export type leagueIsDoneEventEventFilter =
  TypedEventFilter<leagueIsDoneEventEvent>;

export interface leagueIsPlayingEventEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _byAdmin: string;
}
export type leagueIsPlayingEventEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  leagueIsPlayingEventEventObject
>;

export type leagueIsPlayingEventEventFilter =
  TypedEventFilter<leagueIsPlayingEventEvent>;

export interface leagueIsWaitingEventEventObject {
  _leagueId: BigNumber;
  _gameName: string;
  _openTime: BigNumber;
  _liveTime: BigNumber;
  _closeTime: BigNumber;
  _minEntry: BigNumber;
  _byAdmin: string;
  _initReward: BigNumber;
  _maxPlayer: BigNumber;
  _winConds: string[];
  _winCondOps: string[];
}
export type leagueIsWaitingEventEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string[],
    string[]
  ],
  leagueIsWaitingEventEventObject
>;

export type leagueIsWaitingEventEventFilter =
  TypedEventFilter<leagueIsWaitingEventEvent>;

export interface leagueJoinedEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _pAddress: string;
  _nickName: string;
  isBlocked: boolean;
  _uniqueIdCnt: BigNumber;
}
export type leagueJoinedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, boolean, BigNumber],
  leagueJoinedEventObject
>;

export type leagueJoinedEventFilter = TypedEventFilter<leagueJoinedEvent>;

export interface prizeClaimedEventObject {
  _leagueId: BigNumber;
  _time: BigNumber;
  _pAddress: string;
  _nickName: string;
  _amount: BigNumber;
}
export type prizeClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  prizeClaimedEventObject
>;

export type prizeClaimedEventFilter = TypedEventFilter<prizeClaimedEvent>;

export interface setAdminStateEventEventObject {
  userAddr: string;
  state: BigNumber;
  _name: string;
  _time: BigNumber;
}
export type setAdminStateEventEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  setAdminStateEventEventObject
>;

export type setAdminStateEventEventFilter =
  TypedEventFilter<setAdminStateEventEvent>;

export interface unblockPlayerEventEventObject {
  _leagueId: BigNumber;
  _name: string;
}
export type unblockPlayerEventEvent = TypedEvent<
  [BigNumber, string],
  unblockPlayerEventEventObject
>;

export type unblockPlayerEventEventFilter =
  TypedEventFilter<unblockPlayerEventEvent>;

export interface unblockUsersEventEventObject {
  _userAddrs: string[];
}
export type unblockUsersEventEvent = TypedEvent<
  [string[]],
  unblockUsersEventEventObject
>;

export type unblockUsersEventEventFilter =
  TypedEventFilter<unblockUsersEventEvent>;

export interface updateContractBalanceEventEventObject {
  _amount: BigNumber;
  _time: BigNumber;
}
export type updateContractBalanceEventEvent = TypedEvent<
  [BigNumber, BigNumber],
  updateContractBalanceEventEventObject
>;

export type updateContractBalanceEventEventFilter =
  TypedEventFilter<updateContractBalanceEventEvent>;

export interface updateUserEventEventObject {
  _userAddr: string;
  _state: BigNumber;
  _name: string;
  _blockState: boolean;
}
export type updateUserEventEvent = TypedEvent<
  [string, BigNumber, string, boolean],
  updateUserEventEventObject
>;

export type updateUserEventEventFilter = TypedEventFilter<updateUserEventEvent>;

export interface withdrawAsAdminEventEventObject {
  _time: BigNumber;
  _from: string;
  _to: string;
  _amount: BigNumber;
  _message: string;
}
export type withdrawAsAdminEventEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  withdrawAsAdminEventEventObject
>;

export type withdrawAsAdminEventEventFilter =
  TypedEventFilter<withdrawAsAdminEventEvent>;

export interface LeagueMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeagueMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockUsers(
      userAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editLeague(
      leagueId: BigNumberish,
      gameName: string,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    joinLeague(
      leagueId: BigNumberish,
      nickName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kickPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastLeagueId(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeCancelledLeague(
      leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeDoneLeague(
      leagueId: BigNumberish,
      winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makePlayingLeague(
      leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeWaitingLeague(
      gameName: string,
      minEntry: BigNumberish,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      initReward: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminState(
      userAddr: string,
      state: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unblockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unblockUsers(
      userAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAsAdmin(
      to: string,
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      leagueId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  blockPlayers(
    leagueId: BigNumberish,
    players: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockUsers(
    userAddrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editLeague(
    leagueId: BigNumberish,
    gameName: string,
    liveTime: BigNumberish,
    closeTime: BigNumberish,
    maxPlayer: BigNumberish,
    winConds: string[],
    winCondOps: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  joinLeague(
    leagueId: BigNumberish,
    nickName: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kickPlayers(
    leagueId: BigNumberish,
    players: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastLeagueId(overrides?: CallOverrides): Promise<BigNumber>;

  makeCancelledLeague(
    leagueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeDoneLeague(
    leagueId: BigNumberish,
    winners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makePlayingLeague(
    leagueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeWaitingLeague(
    gameName: string,
    minEntry: BigNumberish,
    liveTime: BigNumberish,
    closeTime: BigNumberish,
    maxPlayer: BigNumberish,
    initReward: BigNumberish,
    winConds: string[],
    winCondOps: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminState(
    userAddr: string,
    state: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unblockPlayers(
    leagueId: BigNumberish,
    players: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unblockUsers(
    userAddrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAsAdmin(
    to: string,
    amount: BigNumberish,
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    leagueId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    blockUsers(userAddrs: string[], overrides?: CallOverrides): Promise<void>;

    editLeague(
      leagueId: BigNumberish,
      gameName: string,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    joinLeague(
      leagueId: BigNumberish,
      nickName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kickPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    lastLeagueId(overrides?: CallOverrides): Promise<BigNumber>;

    makeCancelledLeague(
      leagueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeDoneLeague(
      leagueId: BigNumberish,
      winners: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    makePlayingLeague(
      leagueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeWaitingLeague(
      gameName: string,
      minEntry: BigNumberish,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      initReward: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminState(
      userAddr: string,
      state: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unblockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    unblockUsers(userAddrs: string[], overrides?: CallOverrides): Promise<void>;

    withdrawAsAdmin(
      to: string,
      amount: BigNumberish,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewards(
      leagueId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "blockPlayerEvent(uint256,string)"(
      _leagueId?: null,
      _name?: null
    ): blockPlayerEventEventFilter;
    blockPlayerEvent(
      _leagueId?: null,
      _name?: null
    ): blockPlayerEventEventFilter;

    "blockUsersEvent(address[])"(_userAddrs?: null): blockUsersEventEventFilter;
    blockUsersEvent(_userAddrs?: null): blockUsersEventEventFilter;

    "createUserEvent(address,uint256,string,uint256)"(
      _userAddr?: null,
      _state?: null,
      _name?: null,
      _time?: null
    ): createUserEventEventFilter;
    createUserEvent(
      _userAddr?: null,
      _state?: null,
      _name?: null,
      _time?: null
    ): createUserEventEventFilter;

    "editLeagueEvent(uint256,string,uint256,uint256,uint256,string[],string[])"(
      _leagueId?: null,
      _gameName?: null,
      _liveTime?: null,
      _closeTime?: null,
      _maxPlayer?: null,
      _winConds?: null,
      _winCondOps?: null
    ): editLeagueEventEventFilter;
    editLeagueEvent(
      _leagueId?: null,
      _gameName?: null,
      _liveTime?: null,
      _closeTime?: null,
      _maxPlayer?: null,
      _winConds?: null,
      _winCondOps?: null
    ): editLeagueEventEventFilter;

    "kickPlayersEvent(uint256,string[])"(
      _leagueId?: null,
      _names?: null
    ): kickPlayersEventEventFilter;
    kickPlayersEvent(
      _leagueId?: null,
      _names?: null
    ): kickPlayersEventEventFilter;

    "leagueIsCancelledEvent(uint256,uint256,address)"(
      _leagueId?: null,
      _time?: null,
      _byAdmin?: null
    ): leagueIsCancelledEventEventFilter;
    leagueIsCancelledEvent(
      _leagueId?: null,
      _time?: null,
      _byAdmin?: null
    ): leagueIsCancelledEventEventFilter;

    "leagueIsDoneEvent(uint256,uint256,string[],uint256,address)"(
      _leagueId?: null,
      _time?: null,
      _winners?: null,
      _prizePerParticipant?: null,
      _byAdmin?: null
    ): leagueIsDoneEventEventFilter;
    leagueIsDoneEvent(
      _leagueId?: null,
      _time?: null,
      _winners?: null,
      _prizePerParticipant?: null,
      _byAdmin?: null
    ): leagueIsDoneEventEventFilter;

    "leagueIsPlayingEvent(uint256,uint256,address)"(
      _leagueId?: null,
      _time?: null,
      _byAdmin?: null
    ): leagueIsPlayingEventEventFilter;
    leagueIsPlayingEvent(
      _leagueId?: null,
      _time?: null,
      _byAdmin?: null
    ): leagueIsPlayingEventEventFilter;

    "leagueIsWaitingEvent(uint256,string,uint256,uint256,uint256,uint256,address,uint256,uint256,string[],string[])"(
      _leagueId?: null,
      _gameName?: null,
      _openTime?: null,
      _liveTime?: null,
      _closeTime?: null,
      _minEntry?: null,
      _byAdmin?: null,
      _initReward?: null,
      _maxPlayer?: null,
      _winConds?: null,
      _winCondOps?: null
    ): leagueIsWaitingEventEventFilter;
    leagueIsWaitingEvent(
      _leagueId?: null,
      _gameName?: null,
      _openTime?: null,
      _liveTime?: null,
      _closeTime?: null,
      _minEntry?: null,
      _byAdmin?: null,
      _initReward?: null,
      _maxPlayer?: null,
      _winConds?: null,
      _winCondOps?: null
    ): leagueIsWaitingEventEventFilter;

    "leagueJoined(uint256,uint256,address,string,bool,uint256)"(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      isBlocked?: null,
      _uniqueIdCnt?: null
    ): leagueJoinedEventFilter;
    leagueJoined(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      isBlocked?: null,
      _uniqueIdCnt?: null
    ): leagueJoinedEventFilter;

    "prizeClaimed(uint256,uint256,address,string,uint256)"(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      _amount?: null
    ): prizeClaimedEventFilter;
    prizeClaimed(
      _leagueId?: null,
      _time?: null,
      _pAddress?: null,
      _nickName?: null,
      _amount?: null
    ): prizeClaimedEventFilter;

    "setAdminStateEvent(address,uint256,string,uint256)"(
      userAddr?: null,
      state?: null,
      _name?: null,
      _time?: null
    ): setAdminStateEventEventFilter;
    setAdminStateEvent(
      userAddr?: null,
      state?: null,
      _name?: null,
      _time?: null
    ): setAdminStateEventEventFilter;

    "unblockPlayerEvent(uint256,string)"(
      _leagueId?: null,
      _name?: null
    ): unblockPlayerEventEventFilter;
    unblockPlayerEvent(
      _leagueId?: null,
      _name?: null
    ): unblockPlayerEventEventFilter;

    "unblockUsersEvent(address[])"(
      _userAddrs?: null
    ): unblockUsersEventEventFilter;
    unblockUsersEvent(_userAddrs?: null): unblockUsersEventEventFilter;

    "updateContractBalanceEvent(uint256,uint256)"(
      _amount?: null,
      _time?: null
    ): updateContractBalanceEventEventFilter;
    updateContractBalanceEvent(
      _amount?: null,
      _time?: null
    ): updateContractBalanceEventEventFilter;

    "updateUserEvent(address,uint256,string,bool)"(
      _userAddr?: null,
      _state?: null,
      _name?: null,
      _blockState?: null
    ): updateUserEventEventFilter;
    updateUserEvent(
      _userAddr?: null,
      _state?: null,
      _name?: null,
      _blockState?: null
    ): updateUserEventEventFilter;

    "withdrawAsAdminEvent(uint256,address,address,uint256,string)"(
      _time?: null,
      _from?: null,
      _to?: null,
      _amount?: null,
      _message?: null
    ): withdrawAsAdminEventEventFilter;
    withdrawAsAdminEvent(
      _time?: null,
      _from?: null,
      _to?: null,
      _amount?: null,
      _message?: null
    ): withdrawAsAdminEventEventFilter;
  };

  estimateGas: {
    blockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockUsers(
      userAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editLeague(
      leagueId: BigNumberish,
      gameName: string,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    joinLeague(
      leagueId: BigNumberish,
      nickName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kickPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastLeagueId(overrides?: CallOverrides): Promise<BigNumber>;

    makeCancelledLeague(
      leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeDoneLeague(
      leagueId: BigNumberish,
      winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makePlayingLeague(
      leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeWaitingLeague(
      gameName: string,
      minEntry: BigNumberish,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      initReward: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminState(
      userAddr: string,
      state: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unblockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unblockUsers(
      userAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAsAdmin(
      to: string,
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewards(
      leagueId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockUsers(
      userAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editLeague(
      leagueId: BigNumberish,
      gameName: string,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinLeague(
      leagueId: BigNumberish,
      nickName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kickPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastLeagueId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeCancelledLeague(
      leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeDoneLeague(
      leagueId: BigNumberish,
      winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makePlayingLeague(
      leagueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeWaitingLeague(
      gameName: string,
      minEntry: BigNumberish,
      liveTime: BigNumberish,
      closeTime: BigNumberish,
      maxPlayer: BigNumberish,
      initReward: BigNumberish,
      winConds: string[],
      winCondOps: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminState(
      userAddr: string,
      state: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unblockPlayers(
      leagueId: BigNumberish,
      players: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unblockUsers(
      userAddrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAsAdmin(
      to: string,
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      leagueId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
