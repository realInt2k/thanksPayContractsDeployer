/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ThanksPayCheckInterface extends utils.Interface {
  functions: {
    "registerPartnerCheck()": FunctionFragment;
    "registerWorkerCheck()": FunctionFragment;
    "setCompanyBalanceCheck()": FunctionFragment;
    "setLatestRequestCheck()": FunctionFragment;
    "setLatestWagePayCheck()": FunctionFragment;
    "setPartnerBalanceCheck()": FunctionFragment;
    "setWorkerBalanceCheck()": FunctionFragment;
    "workerGetSalaryEarlyCheck(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "registerPartnerCheck"
      | "registerWorkerCheck"
      | "setCompanyBalanceCheck"
      | "setLatestRequestCheck"
      | "setLatestWagePayCheck"
      | "setPartnerBalanceCheck"
      | "setWorkerBalanceCheck"
      | "workerGetSalaryEarlyCheck"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "registerPartnerCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerWorkerCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompanyBalanceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestRequestCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestWagePayCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerBalanceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkerBalanceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workerGetSalaryEarlyCheck",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerPartnerCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWorkerCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompanyBalanceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestRequestCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestWagePayCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerBalanceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkerBalanceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerGetSalaryEarlyCheck",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ThanksPayCheck extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThanksPayCheckInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    registerPartnerCheck(overrides?: CallOverrides): Promise<[boolean]>;

    registerWorkerCheck(overrides?: CallOverrides): Promise<[boolean]>;

    setCompanyBalanceCheck(overrides?: CallOverrides): Promise<[boolean]>;

    setLatestRequestCheck(overrides?: CallOverrides): Promise<[boolean]>;

    setLatestWagePayCheck(overrides?: CallOverrides): Promise<[boolean]>;

    setPartnerBalanceCheck(overrides?: CallOverrides): Promise<[boolean]>;

    setWorkerBalanceCheck(overrides?: CallOverrides): Promise<[boolean]>;

    workerGetSalaryEarlyCheck(
      wId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  registerPartnerCheck(overrides?: CallOverrides): Promise<boolean>;

  registerWorkerCheck(overrides?: CallOverrides): Promise<boolean>;

  setCompanyBalanceCheck(overrides?: CallOverrides): Promise<boolean>;

  setLatestRequestCheck(overrides?: CallOverrides): Promise<boolean>;

  setLatestWagePayCheck(overrides?: CallOverrides): Promise<boolean>;

  setPartnerBalanceCheck(overrides?: CallOverrides): Promise<boolean>;

  setWorkerBalanceCheck(overrides?: CallOverrides): Promise<boolean>;

  workerGetSalaryEarlyCheck(
    wId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    registerPartnerCheck(overrides?: CallOverrides): Promise<boolean>;

    registerWorkerCheck(overrides?: CallOverrides): Promise<boolean>;

    setCompanyBalanceCheck(overrides?: CallOverrides): Promise<boolean>;

    setLatestRequestCheck(overrides?: CallOverrides): Promise<boolean>;

    setLatestWagePayCheck(overrides?: CallOverrides): Promise<boolean>;

    setPartnerBalanceCheck(overrides?: CallOverrides): Promise<boolean>;

    setWorkerBalanceCheck(overrides?: CallOverrides): Promise<boolean>;

    workerGetSalaryEarlyCheck(
      wId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    registerPartnerCheck(overrides?: CallOverrides): Promise<BigNumber>;

    registerWorkerCheck(overrides?: CallOverrides): Promise<BigNumber>;

    setCompanyBalanceCheck(overrides?: CallOverrides): Promise<BigNumber>;

    setLatestRequestCheck(overrides?: CallOverrides): Promise<BigNumber>;

    setLatestWagePayCheck(overrides?: CallOverrides): Promise<BigNumber>;

    setPartnerBalanceCheck(overrides?: CallOverrides): Promise<BigNumber>;

    setWorkerBalanceCheck(overrides?: CallOverrides): Promise<BigNumber>;

    workerGetSalaryEarlyCheck(
      wId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    registerPartnerCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerWorkerCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCompanyBalanceCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLatestRequestCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLatestWagePayCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPartnerBalanceCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setWorkerBalanceCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerGetSalaryEarlyCheck(
      wId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
