/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ThanksPayMain,
  ThanksPayMainInterface,
} from "../../contracts/ThanksPayMain";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_security",
        type: "address",
      },
      {
        internalType: "address",
        name: "dataAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "partnerGotBonus",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "wId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "bankReceipt",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "workerGotThanksPay",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "partnerAddBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "partnerAddBonus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "setLatestWagePay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "subtractFromPartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "bankReceipt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "workerGetsThanksPay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016643803806200166483398181016040528101906200003791906200012c565b81806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000173565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f482620000c7565b9050919050565b6200010681620000e7565b81146200011257600080fd5b50565b6000815190506200012681620000fb565b92915050565b60008060408385031215620001465762000145620000c2565b5b6000620001568582860162000115565b9250506020620001698582860162000115565b9150509250929050565b6114e180620001836000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631713f2661461005c57806369821b7d146100785780639babbec414610094578063d60a7f6a146100b0578063f31a4328146100cc575b600080fd5b61007660048036038101906100719190610e70565b6100e8565b005b610092600480360381019061008d9190610e70565b610332565b005b6100ae60048036038101906100a99190610ff6565b6104b6565b005b6100ca60048036038101906100c59190610e70565b6107dd565b005b6100e660048036038101906100e19190610e70565b610b76565b005b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b815260040161014691906110ce565b60206040518083038186803b15801561015e57600080fd5b505afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101969190611121565b1515146101d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cf906111ab565b60405180910390fd5b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fc96619866040518263ffffffff1660e01b815260040161023691906111da565b60606040518083038186803b15801561024e57600080fd5b505afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610286919061120a565b5091509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662581cb3866102dc8786610dfa90919063ffffffff16565b6040518363ffffffff1660e01b81526004016102f992919061125d565b600060405180830381600087803b15801561031357600080fd5b505af1158015610327573d6000803e3d6000fd5b505050505050505050565b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b815260040161039091906110ce565b60206040518083038186803b1580156103a857600080fd5b505afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e09190611121565b151514610422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610419906111ab565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166369821b7d84846040518363ffffffff1660e01b815260040161047f92919061125d565b600060405180830381600087803b15801561049957600080fd5b505af11580156104ad573d6000803e3d6000fd5b50505050505050565b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b815260040161051491906110ce565b60206040518083038186803b15801561052c57600080fd5b505afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105649190611121565b1515146105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d906111ab565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe9e3d4886040518263ffffffff1660e01b815260040161060391906111da565b60206040518083038186803b15801561061b57600080fd5b505afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190611286565b9050600061066a8683610e1090919063ffffffff16565b905061067687876107dd565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663571f2f6d89836040518363ffffffff1660e01b81526004016106d392919061125d565b600060405180830381600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfd9c72689866040518363ffffffff1660e01b815260040161076292919061125d565b600060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b505050507f56ad4ec6e58c47b0bf0780892fb02b22edbda6d8d348aaa5417e743cf691590188888888886040516107cb95949392919061132a565b60405180910390a15050505050505050565b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b815260040161083b91906110ce565b60206040518083038186803b15801561085357600080fd5b505afa158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088b9190611121565b1515146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906111ab565b60405180910390fd5b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fc96619866040518263ffffffff1660e01b815260040161092b91906111da565b60606040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b919061120a565b5091509150818411610a2c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662581cb3866109d88786610e1090919063ffffffff16565b6040518363ffffffff1660e01b81526004016109f592919061125d565b600060405180830381600087803b158015610a0f57600080fd5b505af1158015610a23573d6000803e3d6000fd5b50505050610b6f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662581cb38660006040518363ffffffff1660e01b8152600401610a899291906113c9565b600060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff6d383786610b1f610b108689610e1090919063ffffffff16565b85610e1090919063ffffffff16565b6040518363ffffffff1660e01b8152600401610b3c92919061125d565b600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b505050505b5050505050565b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b8152600401610bd491906110ce565b60206040518083038186803b158015610bec57600080fd5b505afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611121565b151514610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d906111ab565b60405180910390fd5b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fc96619866040518263ffffffff1660e01b8152600401610cc491906111da565b60606040518083038186803b158015610cdc57600080fd5b505afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d14919061120a565b5091509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff6d383786610d6b8785610dfa90919063ffffffff16565b6040518363ffffffff1660e01b8152600401610d8892919061125d565b600060405180830381600087803b158015610da257600080fd5b505af1158015610db6573d6000803e3d6000fd5b505050507fa682581ca3def408fb7d1d64f2ef32a7f73145d7e3e4feba51a54fe8f88d71408585604051610deb92919061125d565b60405180910390a15050505050565b60008183610e089190611421565b905092915050565b60008183610e1e9190611477565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e4d81610e3a565b8114610e5857600080fd5b50565b600081359050610e6a81610e44565b92915050565b60008060408385031215610e8757610e86610e30565b5b6000610e9585828601610e5b565b9250506020610ea685828601610e5b565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f0382610eba565b810181811067ffffffffffffffff82111715610f2257610f21610ecb565b5b80604052505050565b6000610f35610e26565b9050610f418282610efa565b919050565b600067ffffffffffffffff821115610f6157610f60610ecb565b5b610f6a82610eba565b9050602081019050919050565b82818337600083830152505050565b6000610f99610f9484610f46565b610f2b565b905082815260208101848484011115610fb557610fb4610eb5565b5b610fc0848285610f77565b509392505050565b600082601f830112610fdd57610fdc610eb0565b5b8135610fed848260208601610f86565b91505092915050565b600080600080600060a0868803121561101257611011610e30565b5b600061102088828901610e5b565b955050602061103188828901610e5b565b945050604061104288828901610e5b565b935050606086013567ffffffffffffffff81111561106357611062610e35565b5b61106f88828901610fc8565b925050608061108088828901610e5b565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110b88261108d565b9050919050565b6110c8816110ad565b82525050565b60006020820190506110e360008301846110bf565b92915050565b60008115159050919050565b6110fe816110e9565b811461110957600080fd5b50565b60008151905061111b816110f5565b92915050565b60006020828403121561113757611136610e30565b5b60006111458482850161110c565b91505092915050565b600082825260208201905092915050565b7f4655434b00000000000000000000000000000000000000000000000000000000600082015250565b600061119560048361114e565b91506111a08261115f565b602082019050919050565b600060208201905081810360008301526111c481611188565b9050919050565b6111d481610e3a565b82525050565b60006020820190506111ef60008301846111cb565b92915050565b60008151905061120481610e44565b92915050565b60008060006060848603121561122357611222610e30565b5b6000611231868287016111f5565b9350506020611242868287016111f5565b9250506040611253868287016111f5565b9150509250925092565b600060408201905061127260008301856111cb565b61127f60208301846111cb565b9392505050565b60006020828403121561129c5761129b610e30565b5b60006112aa848285016111f5565b91505092915050565b600081519050919050565b60005b838110156112dc5780820151818401526020810190506112c1565b838111156112eb576000848401525b50505050565b60006112fc826112b3565b611306818561114e565b93506113168185602086016112be565b61131f81610eba565b840191505092915050565b600060a08201905061133f60008301886111cb565b61134c60208301876111cb565b61135960408301866111cb565b818103606083015261136b81856112f1565b905061137a60808301846111cb565b9695505050505050565b6000819050919050565b6000819050919050565b60006113b36113ae6113a984611384565b61138e565b610e3a565b9050919050565b6113c381611398565b82525050565b60006040820190506113de60008301856111cb565b6113eb60208301846113ba565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142c82610e3a565b915061143783610e3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561146c5761146b6113f2565b5b828201905092915050565b600061148282610e3a565b915061148d83610e3a565b9250828210156114a05761149f6113f2565b5b82820390509291505056fea26469706673582212207b57f86209914a7d37ebfd56cc5ee84d2a30125271fe48a360f227e6863d1e2b64736f6c63430008090033";

type ThanksPayMainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksPayMainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksPayMain__factory extends ContractFactory {
  constructor(...args: ThanksPayMainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _security: PromiseOrValue<string>,
    dataAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksPayMain> {
    return super.deploy(
      _security,
      dataAddr,
      overrides || {}
    ) as Promise<ThanksPayMain>;
  }
  override getDeployTransaction(
    _security: PromiseOrValue<string>,
    dataAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_security, dataAddr, overrides || {});
  }
  override attach(address: string): ThanksPayMain {
    return super.attach(address) as ThanksPayMain;
  }
  override connect(signer: Signer): ThanksPayMain__factory {
    return super.connect(signer) as ThanksPayMain__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksPayMainInterface {
    return new utils.Interface(_abi) as ThanksPayMainInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksPayMain {
    return new Contract(address, _abi, signerOrProvider) as ThanksPayMain;
  }
}
