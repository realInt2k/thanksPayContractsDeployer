/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WorkerWon,
  WorkerWonInterface,
} from "../../../contracts/ERC20/WorkerWon";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dataAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "securityAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getPartnerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getWorkerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "for_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
    ],
    name: "readPartner",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "latestPay",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wId",
        type: "address",
      },
    ],
    name: "readWorker",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "wage",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "latestRequest",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280601481526020017f5468616e6b7350617920576f726b657220576f6e00000000000000000000000081525060039080519060200190620000519291906200017a565b506040518060400160405280600381526020017f5457570000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f9291906200017a565b506000600560006101000a81548160ff021916908360ff160217905550348015620000c957600080fd5b5060405162001b9d38038062001b9d8339818101604052810190620000ef919062000294565b81806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000340565b82805462000188906200030a565b90600052602060002090601f016020900481019282620001ac5760008555620001f8565b82601f10620001c757805160ff1916838001178555620001f8565b82800160010185558215620001f8579182015b82811115620001f7578251825591602001919060010190620001da565b5b5090506200020791906200020b565b5090565b5b80821115620002265760008160009055506001016200020c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200025c826200022f565b9050919050565b6200026e816200024f565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060408385031215620002ae57620002ad6200022a565b5b6000620002be858286016200027d565b9250506020620002d1858286016200027d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032357607f821691505b602082108114156200033a5762000339620002db565b5b50919050565b61184d80620003506000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80634d0de22511610097578063a9059cbb11610066578063a9059cbb146102ec578063ba49cdb51461031c578063da1919b31461034d578063dd62ed3e1461036957610100565b80634d0de2251461023e57806355b6ed5c1461026e57806370a082311461029e57806395d89b41146102ce57610100565b8063124d91e5116100d3578063124d91e5146101b657806318160ddd146101d257806323b872dd146101f0578063313ce5671461022057610100565b8063016fa01814610105578063065611551461013557806306fdde0314610168578063095ea7b314610186575b600080fd5b61011f600480360381019061011a919061110b565b610399565b60405161012c9190611151565b60405180910390f35b61014f600480360381019061014a919061110b565b6103b1565b60405161015f949392919061117b565b60405180910390f35b61017061046f565b60405161017d9190611259565b60405180910390f35b6101a0600480360381019061019b91906112a7565b6104fd565b6040516101ad9190611302565b60405180910390f35b6101d060048036038101906101cb919061131d565b6106a3565b005b6101da610996565b6040516101e79190611151565b60405180910390f35b61020a60048036038101906102059190611370565b61099c565b6040516102179190611302565b60405180910390f35b610228610a8d565b60405161023591906113df565b60405180910390f35b6102586004803603810190610253919061110b565b610aa0565b6040516102659190611151565b60405180910390f35b610288600480360381019061028391906113fa565b610ae9565b6040516102959190611151565b60405180910390f35b6102b860048036038101906102b3919061110b565b610b0e565b6040516102c59190611151565b60405180910390f35b6102d6610b20565b6040516102e39190611259565b60405180910390f35b610306600480360381019061030191906112a7565b610bae565b6040516103139190611302565b60405180910390f35b6103366004803603810190610331919061110b565b610c9f565b60405161034492919061143a565b60405180910390f35b610367600480360381019061036291906112a7565b610d53565b005b610383600480360381019061037e91906113fa565b610e42565b6040516103909190611151565b60405180910390f35b6000806103a583610c9f565b50905080915050919050565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634048a257866040518263ffffffff1660e01b81526004016104109190611463565b60806040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906114a8565b93509350935093509193509193565b6003805461047c9061153e565b80601f01602080910402602001604051908101604052809291908181526020018280546104a89061153e565b80156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b505050505081565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b815260040161055a9190611463565b60206040518083038186803b15801561057257600080fd5b505afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa919061159c565b6105b357600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106919190611151565b60405180910390a36001905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016106fe9190611463565b60206040518083038186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e919061159c565b61075757600080fd5b816107628433610e42565b10156107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90611615565b60405180910390fd5b816107ad84610b0e565b10156107ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e590611681565b60405180910390fd5b60006107f984610b0e565b905061080e8382610fca90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beee8cf985836040518363ffffffff1660e01b815260040161086b9291906116a1565b600060405180830381600087803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b69860b85846040518363ffffffff1660e01b81526004016108f89291906116a1565b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516109889190611151565b60405180910390a350505050565b60015481565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016109f99190611463565b60206040518083038186803b158015610a1157600080fd5b505afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a49919061159c565b610a5257600080fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490611716565b60405180910390fd5b600560009054906101000a900460ff1681565b6000806000806000610ab1866103b1565b93509350935093506000610ac483610c9f565b915050808211610adb578395505050505050610ae4565b84955050505050505b919050565b6002602052816000526040600020602052806000526040600020600091509150505481565b6000610b1982610aa0565b9050919050565b60048054610b2d9061153e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b599061153e565b8015610ba65780601f10610b7b57610100808354040283529160200191610ba6565b820191906000526020600020905b815481529060010190602001808311610b8957829003601f168201915b505050505081565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b8152600401610c0b9190611463565b60206040518083038186803b158015610c2357600080fd5b505afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b919061159c565b610c6457600080fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690611716565b60405180910390fd5b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c33652846040518263ffffffff1660e01b8152600401610cfb9190611463565b604080518083038186803b158015610d1257600080fd5b505afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190611736565b91509150915091565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b8152600401610dae9190611463565b60206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe919061159c565b610e0757600080fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3990611716565b60405180910390fd5b6000610e846040518060400160405280600881526020017f41646472737365730000000000000000000000000000000000000000000000008152508484610fe0565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b8152600401610edf9190611463565b60206040518083038186803b158015610ef757600080fd5b505afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f919061159c565b15610f4457610f3d83610b0e565b9050610fc4565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60008183610fd891906117a5565b905092915050565b61107a838383604051602401610ff8939291906117d9565b6040516020818303038152906040527ffcec75e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061107f565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110d8826110ad565b9050919050565b6110e8816110cd565b81146110f357600080fd5b50565b600081359050611105816110df565b92915050565b600060208284031215611121576111206110a8565b5b600061112f848285016110f6565b91505092915050565b6000819050919050565b61114b81611138565b82525050565b60006020820190506111666000830184611142565b92915050565b611175816110cd565b82525050565b60006080820190506111906000830187611142565b61119d6020830186611142565b6111aa604083018561116c565b6111b76060830184611142565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111fa5780820151818401526020810190506111df565b83811115611209576000848401525b50505050565b6000601f19601f8301169050919050565b600061122b826111c0565b61123581856111cb565b93506112458185602086016111dc565b61124e8161120f565b840191505092915050565b600060208201905081810360008301526112738184611220565b905092915050565b61128481611138565b811461128f57600080fd5b50565b6000813590506112a18161127b565b92915050565b600080604083850312156112be576112bd6110a8565b5b60006112cc858286016110f6565b92505060206112dd85828601611292565b9150509250929050565b60008115159050919050565b6112fc816112e7565b82525050565b600060208201905061131760008301846112f3565b92915050565b600080600060608486031215611336576113356110a8565b5b6000611344868287016110f6565b935050602061135586828701611292565b925050604061136686828701611292565b9150509250925092565b600080600060608486031215611389576113886110a8565b5b6000611397868287016110f6565b93505060206113a8868287016110f6565b92505060406113b986828701611292565b9150509250925092565b600060ff82169050919050565b6113d9816113c3565b82525050565b60006020820190506113f460008301846113d0565b92915050565b60008060408385031215611411576114106110a8565b5b600061141f858286016110f6565b9250506020611430858286016110f6565b9150509250929050565b600060408201905061144f6000830185611142565b61145c6020830184611142565b9392505050565b6000602082019050611478600083018461116c565b92915050565b60008151905061148d8161127b565b92915050565b6000815190506114a2816110df565b92915050565b600080600080608085870312156114c2576114c16110a8565b5b60006114d08782880161147e565b94505060206114e18782880161147e565b93505060406114f287828801611493565b92505060606115038782880161147e565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061155657607f821691505b6020821081141561156a5761156961150f565b5b50919050565b611579816112e7565b811461158457600080fd5b50565b60008151905061159681611570565b92915050565b6000602082840312156115b2576115b16110a8565b5b60006115c084828501611587565b91505092915050565b7f4e6f7420656e6f75676820616c6c6f77616e6365000000000000000000000000600082015250565b60006115ff6014836111cb565b915061160a826115c9565b602082019050919050565b6000602082019050818103600083015261162e816115f2565b9050919050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b600061166b6012836111cb565b915061167682611635565b602082019050919050565b6000602082019050818103600083015261169a8161165e565b9050919050565b60006040820190506116b6600083018561116c565b6116c36020830184611142565b9392505050565b7f556e737570706f72746564000000000000000000000000000000000000000000600082015250565b6000611700600b836111cb565b915061170b826116ca565b602082019050919050565b6000602082019050818103600083015261172f816116f3565b9050919050565b6000806040838503121561174d5761174c6110a8565b5b600061175b8582860161147e565b925050602061176c8582860161147e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117b082611138565b91506117bb83611138565b9250828210156117ce576117cd611776565b5b828203905092915050565b600060608201905081810360008301526117f38186611220565b9050611802602083018561116c565b61180f604083018461116c565b94935050505056fea264697066735822122054656d8b282e2924891ef6aad7bc25c56176e32c09c6f5df30bcc0f9c229105764736f6c63430008090033";

type WorkerWonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorkerWonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WorkerWon__factory extends ContractFactory {
  constructor(...args: WorkerWonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dataAddress: PromiseOrValue<string>,
    securityAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WorkerWon> {
    return super.deploy(
      dataAddress,
      securityAddress,
      overrides || {}
    ) as Promise<WorkerWon>;
  }
  override getDeployTransaction(
    dataAddress: PromiseOrValue<string>,
    securityAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      dataAddress,
      securityAddress,
      overrides || {}
    );
  }
  override attach(address: string): WorkerWon {
    return super.attach(address) as WorkerWon;
  }
  override connect(signer: Signer): WorkerWon__factory {
    return super.connect(signer) as WorkerWon__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorkerWonInterface {
    return new utils.Interface(_abi) as WorkerWonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WorkerWon {
    return new Contract(address, _abi, signerOrProvider) as WorkerWon;
  }
}
