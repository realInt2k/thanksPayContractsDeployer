/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ThanksSecurityWrapper,
  ThanksSecurityWrapperInterface,
} from "../../../contracts/security/ThanksSecurityWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "securityAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610155380380610155833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b603f806101166000396000f3fe6080604052600080fdfea264697066735822122086fa303e909803782eb0bc469d6c5437771d0b7f081c42db832b761cfa7ca93464736f6c63430008090033";

type ThanksSecurityWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksSecurityWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksSecurityWrapper__factory extends ContractFactory {
  constructor(...args: ThanksSecurityWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    securityAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksSecurityWrapper> {
    return super.deploy(
      securityAddr,
      overrides || {}
    ) as Promise<ThanksSecurityWrapper>;
  }
  override getDeployTransaction(
    securityAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(securityAddr, overrides || {});
  }
  override attach(address: string): ThanksSecurityWrapper {
    return super.attach(address) as ThanksSecurityWrapper;
  }
  override connect(signer: Signer): ThanksSecurityWrapper__factory {
    return super.connect(signer) as ThanksSecurityWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksSecurityWrapperInterface {
    return new utils.Interface(_abi) as ThanksSecurityWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksSecurityWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ThanksSecurityWrapper;
  }
}
