/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ThanksPayCheck,
  ThanksPayCheckInterface,
} from "../../../contracts/check/ThanksPayCheck";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dataAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "securityAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "partnerWithdrawCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registerPartnerCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registerWorkerCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setCompanyBalanceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setLatestRequestCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setLatestWagePayCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setPartnerBalanceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setWorkerBalanceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "subtractFromPartnerCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "workerGetsThanksPayCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610da4380380610da48339818101604052810190610032919061011d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b610c388061016c6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a72ee0b911610066578063a72ee0b914610139578063b4f779c314610169578063bd0cb36814610187578063c0ce5e86146101b7578063fa7905b0146101d55761009e565b8063278475a0146100a35780632dc22765146100c157806358531865146100df5780635c7a12bc146100fd578063a1f6a3771461011b575b600080fd5b6100ab610205565b6040516100b89190610973565b60405180910390f35b6100c96102b6565b6040516100d69190610973565b60405180910390f35b6100e7610367565b6040516100f49190610973565b60405180910390f35b610105610418565b6040516101129190610973565b60405180910390f35b6101236104c9565b6040516101309190610973565b60405180910390f35b610153600480360381019061014e91906109c9565b61057a565b6040516101609190610973565b60405180910390f35b610171610648565b60405161017e9190610973565b60405180910390f35b6101a1600480360381019061019c91906109c9565b6106f9565b6040516101ae9190610973565b60405180910390f35b6101bf6107d8565b6040516101cc9190610973565b60405180910390f35b6101ef60048036038101906101ea91906109c9565b610889565b6040516101fc9190610973565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016102619190610a4a565b60206040518083038186803b15801561027957600080fd5b505afa15801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b19190610a91565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016103129190610a4a565b60206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103629190610a91565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016103c39190610a4a565b60206040518083038186803b1580156103db57600080fd5b505afa1580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104139190610a91565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016104749190610a4a565b60206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610a91565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016105259190610a4a565b60206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190610a91565b905090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe9e3d4856040518263ffffffff1660e01b81526004016105d89190610acd565b60206040518083038186803b1580156105f057600080fd5b505afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106289190610afd565b90508281101561063c576000915050610642565b60019150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016106a49190610a4a565b60206040518083038186803b1580156106bc57600080fd5b505afa1580156106d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f49190610a91565b905090565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fc96619866040518263ffffffff1660e01b81526004016107599190610acd565b60606040518083038186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610b2a565b50915091508381836107bb9190610bac565b106107cb576001925050506107d2565b6000925050505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016108349190610a4a565b60206040518083038186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108849190610a91565b905090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fc96619856040518263ffffffff1660e01b81526004016108e79190610acd565b60606040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190610b2a565b5050905082811061094c576001915050610952565b60009150505b92915050565b60008115159050919050565b61096d81610958565b82525050565b60006020820190506109886000830184610964565b92915050565b600080fd5b6000819050919050565b6109a681610993565b81146109b157600080fd5b50565b6000813590506109c38161099d565b92915050565b600080604083850312156109e0576109df61098e565b5b60006109ee858286016109b4565b92505060206109ff858286016109b4565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3482610a09565b9050919050565b610a4481610a29565b82525050565b6000602082019050610a5f6000830184610a3b565b92915050565b610a6e81610958565b8114610a7957600080fd5b50565b600081519050610a8b81610a65565b92915050565b600060208284031215610aa757610aa661098e565b5b6000610ab584828501610a7c565b91505092915050565b610ac781610993565b82525050565b6000602082019050610ae26000830184610abe565b92915050565b600081519050610af78161099d565b92915050565b600060208284031215610b1357610b1261098e565b5b6000610b2184828501610ae8565b91505092915050565b600080600060608486031215610b4357610b4261098e565b5b6000610b5186828701610ae8565b9350506020610b6286828701610ae8565b9250506040610b7386828701610ae8565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bb782610993565b9150610bc283610993565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bf757610bf6610b7d565b5b82820190509291505056fea2646970667358221220b0df375a4e1a82cdbbb419c89babe66277af709c8aa64da1baf6ad477989870a64736f6c63430008090033";

type ThanksPayCheckConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksPayCheckConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksPayCheck__factory extends ContractFactory {
  constructor(...args: ThanksPayCheckConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dataAddr: PromiseOrValue<string>,
    securityAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksPayCheck> {
    return super.deploy(
      dataAddr,
      securityAddr,
      overrides || {}
    ) as Promise<ThanksPayCheck>;
  }
  override getDeployTransaction(
    dataAddr: PromiseOrValue<string>,
    securityAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(dataAddr, securityAddr, overrides || {});
  }
  override attach(address: string): ThanksPayCheck {
    return super.attach(address) as ThanksPayCheck;
  }
  override connect(signer: Signer): ThanksPayCheck__factory {
    return super.connect(signer) as ThanksPayCheck__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksPayCheckInterface {
    return new utils.Interface(_abi) as ThanksPayCheckInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksPayCheck {
    return new Contract(address, _abi, signerOrProvider) as ThanksPayCheck;
  }
}
