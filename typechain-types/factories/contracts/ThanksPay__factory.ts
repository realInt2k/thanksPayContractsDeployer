/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ThanksPay, ThanksPayInterface } from "../../contracts/ThanksPay";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dataAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_partnerWon",
        type: "address",
      },
      {
        internalType: "address",
        name: "_workerWon",
        type: "address",
      },
      {
        internalType: "address",
        name: "_security",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "companyPools",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "addRemove",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "company",
        type: "address",
      },
      {
        internalType: "address",
        name: "pledger",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "bankReceipt",
        type: "string",
      },
    ],
    name: "partnerTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "latestPay",
        type: "uint256",
      },
    ],
    name: "registerPartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wId",
        type: "address",
      },
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wage",
        type: "uint256",
      },
    ],
    name: "registerWorker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "worker",
        type: "address",
      },
      {
        internalType: "address",
        name: "company",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "bankReceipt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "workerTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014f9380380620014f9833981810160405281019062000037919062000372565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338f4b7346040518163ffffffff1660e01b815260040160206040518083038186803b158015620001a557600080fd5b505afa158015620001ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e091906200041f565b90506200022e6040518060400160405280601281526020017f73656375726974792e736869742069733a200000000000000000000000000000815250826200023960201b620007a21760201c565b50505050506200053a565b620002db82826040516024016200025292919062000506565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620002df60201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200033a826200030d565b9050919050565b6200034c816200032d565b81146200035857600080fd5b50565b6000815190506200036c8162000341565b92915050565b600080600080608085870312156200038f576200038e62000308565b5b60006200039f878288016200035b565b9450506020620003b2878288016200035b565b9350506040620003c5878288016200035b565b9250506060620003d8878288016200035b565b91505092959194509250565b6000819050919050565b620003f981620003e4565b81146200040557600080fd5b50565b6000815190506200041981620003ee565b92915050565b60006020828403121562000438576200043762000308565b5b6000620004488482850162000408565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200048d57808201518184015260208101905062000470565b838111156200049d576000848401525b50505050565b6000601f19601f8301169050919050565b6000620004c18262000451565b620004cd81856200045c565b9350620004df8185602086016200046d565b620004ea81620004a3565b840191505092915050565b6200050081620003e4565b82525050565b60006040820190508181036000830152620005228185620004b4565b9050620005336020830184620004f5565b9392505050565b610faf806200054a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631a078ed81461005c5780633c2bbd1914610078578063516884cb146100a85780637cc2097d146100c4578063bf55a7a4146100e0575b600080fd5b6100766004803603810190610071919061093b565b6100fc565b005b610092600480360381019061008d919061098e565b610190565b60405161009f91906109ca565b60405180910390f35b6100c260048036038101906100bd9190610b2b565b6101ae565b005b6100de60048036038101906100d99190610bc2565b610509565b005b6100fa60048036038101906100f59190610c02565b6105f6565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a078ed88484846040518463ffffffff1660e01b815260040161015993929190610ca8565b600060405180830381600087803b15801561017357600080fd5b505af1158015610187573d6000803e3d6000fd5b50505050505050565b60046020528060005260406000206000915090508060000154905081565b60008514156102e257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da1919b384846040518363ffffffff1660e01b8152600401610214929190610cdf565b600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b5050505061029b82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461083e90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b60018514156105025781600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103479190610d08565b60206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190610d38565b116103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce90610dc2565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679084846040518363ffffffff1660e01b8152600401610434929190610cdf565b600060405180830381600087803b15801561044e57600080fd5b505af1158015610462573d6000803e3d6000fd5b505050506104bb82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461085490919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cc2097d83836040518363ffffffff1660e01b8152600401610564929190610cdf565b600060405180830381600087803b15801561057e57600080fd5b505af1158015610592573d6000803e3d6000fd5b5050505060405180602001604052806000815250600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001559050505050565b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101561067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290610dc2565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679085856040518363ffffffff1660e01b81526004016106d8929190610cdf565b600060405180830381600087803b1580156106f257600080fd5b505af1158015610706573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663124d91e58685846040518463ffffffff1660e01b815260040161076993929190610de2565b600060405180830381600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050505050505050565b61083a82826040516024016107b8929190610e90565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061086a565b5050565b6000818361084c9190610eef565b905092915050565b600081836108629190610f45565b905092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108d2826108a7565b9050919050565b6108e2816108c7565b81146108ed57600080fd5b50565b6000813590506108ff816108d9565b92915050565b6000819050919050565b61091881610905565b811461092357600080fd5b50565b6000813590506109358161090f565b92915050565b6000806000606084860312156109545761095361089d565b5b6000610962868287016108f0565b9350506020610973868287016108f0565b925050604061098486828701610926565b9150509250925092565b6000602082840312156109a4576109a361089d565b5b60006109b2848285016108f0565b91505092915050565b6109c481610905565b82525050565b60006020820190506109df60008301846109bb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a38826109ef565b810181811067ffffffffffffffff82111715610a5757610a56610a00565b5b80604052505050565b6000610a6a610893565b9050610a768282610a2f565b919050565b600067ffffffffffffffff821115610a9657610a95610a00565b5b610a9f826109ef565b9050602081019050919050565b82818337600083830152505050565b6000610ace610ac984610a7b565b610a60565b905082815260208101848484011115610aea57610ae96109ea565b5b610af5848285610aac565b509392505050565b600082601f830112610b1257610b116109e5565b5b8135610b22848260208601610abb565b91505092915050565b600080600080600060a08688031215610b4757610b4661089d565b5b6000610b5588828901610926565b9550506020610b66888289016108f0565b9450506040610b77888289016108f0565b9350506060610b8888828901610926565b925050608086013567ffffffffffffffff811115610ba957610ba86108a2565b5b610bb588828901610afd565b9150509295509295909350565b60008060408385031215610bd957610bd861089d565b5b6000610be7858286016108f0565b9250506020610bf885828601610926565b9150509250929050565b600080600080600060a08688031215610c1e57610c1d61089d565b5b6000610c2c888289016108f0565b9550506020610c3d888289016108f0565b9450506040610c4e88828901610926565b935050606086013567ffffffffffffffff811115610c6f57610c6e6108a2565b5b610c7b88828901610afd565b9250506080610c8c88828901610926565b9150509295509295909350565b610ca2816108c7565b82525050565b6000606082019050610cbd6000830186610c99565b610cca6020830185610c99565b610cd760408301846109bb565b949350505050565b6000604082019050610cf46000830185610c99565b610d0160208301846109bb565b9392505050565b6000602082019050610d1d6000830184610c99565b92915050565b600081519050610d328161090f565b92915050565b600060208284031215610d4e57610d4d61089d565b5b6000610d5c84828501610d23565b91505092915050565b600082825260208201905092915050565b7f596f752063616e6e6f742077697468647261772074686973206d756368210000600082015250565b6000610dac601e83610d65565b9150610db782610d76565b602082019050919050565b60006020820190508181036000830152610ddb81610d9f565b9050919050565b6000606082019050610df76000830186610c99565b610e0460208301856109bb565b610e1160408301846109bb565b949350505050565b600081519050919050565b60005b83811015610e42578082015181840152602081019050610e27565b83811115610e51576000848401525b50505050565b6000610e6282610e19565b610e6c8185610d65565b9350610e7c818560208601610e24565b610e85816109ef565b840191505092915050565b60006040820190508181036000830152610eaa8185610e57565b9050610eb960208301846109bb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610efa82610905565b9150610f0583610905565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f3a57610f39610ec0565b5b828201905092915050565b6000610f5082610905565b9150610f5b83610905565b925082821015610f6e57610f6d610ec0565b5b82820390509291505056fea264697066735822122001e33d0b5f7a6ab04a1b7d722a62c590ce5e6662b98cc7360de2d1813ad0615564736f6c63430008090033";

type ThanksPayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksPayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksPay__factory extends ContractFactory {
  constructor(...args: ThanksPayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dataAddress: PromiseOrValue<string>,
    _partnerWon: PromiseOrValue<string>,
    _workerWon: PromiseOrValue<string>,
    _security: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksPay> {
    return super.deploy(
      dataAddress,
      _partnerWon,
      _workerWon,
      _security,
      overrides || {}
    ) as Promise<ThanksPay>;
  }
  override getDeployTransaction(
    dataAddress: PromiseOrValue<string>,
    _partnerWon: PromiseOrValue<string>,
    _workerWon: PromiseOrValue<string>,
    _security: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      dataAddress,
      _partnerWon,
      _workerWon,
      _security,
      overrides || {}
    );
  }
  override attach(address: string): ThanksPay {
    return super.attach(address) as ThanksPay;
  }
  override connect(signer: Signer): ThanksPay__factory {
    return super.connect(signer) as ThanksPay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksPayInterface {
    return new utils.Interface(_abi) as ThanksPayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksPay {
    return new Contract(address, _abi, signerOrProvider) as ThanksPay;
  }
}
