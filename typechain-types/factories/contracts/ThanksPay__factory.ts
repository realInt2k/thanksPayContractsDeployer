/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ThanksPay, ThanksPayInterface } from "../../contracts/ThanksPay";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dataAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_partnerWon",
        type: "address",
      },
      {
        internalType: "address",
        name: "_workerWon",
        type: "address",
      },
      {
        internalType: "address",
        name: "_security",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "addRemove",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "company",
        type: "address",
      },
      {
        internalType: "address",
        name: "pledger",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "bankReceipt",
        type: "string",
      },
    ],
    name: "partnerTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "latestPay",
        type: "uint256",
      },
    ],
    name: "registerPartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wId",
        type: "address",
      },
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wage",
        type: "uint256",
      },
    ],
    name: "registerWorker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "setLatestWagePay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_company",
        type: "address",
      },
    ],
    name: "viewCompanyPoolBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "workerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "company",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "bankReceipt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "workerTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011ce380380620011ce8339818101604052810190620000379190620002f0565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338f4b7346040518163ffffffff1660e01b815260040160206040518083038186803b1580156200012357600080fd5b505afa15801562000138573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015e91906200039d565b9050620001ac6040518060400160405280601281526020017f73656375726974792e736869742069733a20000000000000000000000000000081525082620001b760201b6200059c1760201c565b5050505050620004b8565b620002598282604051602401620001d092919062000484565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200025d60201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b8826200028b565b9050919050565b620002ca81620002ab565b8114620002d657600080fd5b50565b600081519050620002ea81620002bf565b92915050565b600080600080608085870312156200030d576200030c62000286565b5b60006200031d87828801620002d9565b94505060206200033087828801620002d9565b93505060406200034387828801620002d9565b92505060606200035687828801620002d9565b91505092959194509250565b6000819050919050565b620003778162000362565b81146200038357600080fd5b50565b60008151905062000397816200036c565b92915050565b600060208284031215620003b657620003b562000286565b5b6000620003c68482850162000386565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200040b578082015181840152602081019050620003ee565b838111156200041b576000848401525b50505050565b6000601f19601f8301169050919050565b60006200043f82620003cf565b6200044b8185620003da565b93506200045d818560208601620003eb565b620004688162000421565b840191505092915050565b6200047e8162000362565b82525050565b60006040820190508181036000830152620004a0818562000432565b9050620004b1602083018462000473565b9392505050565b610d0680620004c86000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806307f6d0a4146100675780631a078ed814610083578063516884cb1461009f5780635db43a65146100bb5780637cc2097d146100eb578063bf55a7a414610107575b600080fd5b610081600480360381019061007c9190610735565b610123565b005b61009d60048036038101906100989190610775565b6101b4565b005b6100b960048036038101906100b4919061090e565b610248565b005b6100d560048036038101906100d091906109a5565b6104fd565b6040516100e291906109e1565b60405180910390f35b61010560048036038101906101009190610735565b610504565b005b610121600480360381019061011c91906109fc565b610595565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307f6d0a483836040518363ffffffff1660e01b815260040161017e929190610aa2565b600060405180830381600087803b15801561019857600080fd5b505af11580156101ac573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a078ed88484846040518463ffffffff1660e01b815260040161021193929190610acb565b600060405180830381600087803b15801561022b57600080fd5b505af115801561023f573d6000803e3d6000fd5b50505050505050565b600085141561039f57600061030e8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eb9ddbb9886040518263ffffffff1660e01b81526004016102b09190610b02565b60206040518083038186803b1580156102c857600080fd5b505afa1580156102dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103009190610b32565b61063890919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acced23186836040518363ffffffff1660e01b815260040161036b929190610aa2565b600060405180830381600087803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b50505050505b60018514156104f65760006104658360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eb9ddbb9886040518263ffffffff1660e01b81526004016104079190610b02565b60206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190610b32565b61064e90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663acced23186836040518363ffffffff1660e01b81526004016104c2929190610aa2565b600060405180830381600087803b1580156104dc57600080fd5b505af11580156104f0573d6000803e3d6000fd5b50505050505b5050505050565b6000919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cc2097d83836040518363ffffffff1660e01b815260040161055f929190610aa2565b600060405180830381600087803b15801561057957600080fd5b505af115801561058d573d6000803e3d6000fd5b505050505050565b5050505050565b61063482826040516024016105b2929190610be7565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610664565b5050565b600081836106469190610c46565b905092915050565b6000818361065c9190610c9c565b905092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106cc826106a1565b9050919050565b6106dc816106c1565b81146106e757600080fd5b50565b6000813590506106f9816106d3565b92915050565b6000819050919050565b610712816106ff565b811461071d57600080fd5b50565b60008135905061072f81610709565b92915050565b6000806040838503121561074c5761074b610697565b5b600061075a858286016106ea565b925050602061076b85828601610720565b9150509250929050565b60008060006060848603121561078e5761078d610697565b5b600061079c868287016106ea565b93505060206107ad868287016106ea565b92505060406107be86828701610720565b9150509250925092565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61081b826107d2565b810181811067ffffffffffffffff8211171561083a576108396107e3565b5b80604052505050565b600061084d61068d565b90506108598282610812565b919050565b600067ffffffffffffffff821115610879576108786107e3565b5b610882826107d2565b9050602081019050919050565b82818337600083830152505050565b60006108b16108ac8461085e565b610843565b9050828152602081018484840111156108cd576108cc6107cd565b5b6108d884828561088f565b509392505050565b600082601f8301126108f5576108f46107c8565b5b813561090584826020860161089e565b91505092915050565b600080600080600060a0868803121561092a57610929610697565b5b600061093888828901610720565b9550506020610949888289016106ea565b945050604061095a888289016106ea565b935050606061096b88828901610720565b925050608086013567ffffffffffffffff81111561098c5761098b61069c565b5b610998888289016108e0565b9150509295509295909350565b6000602082840312156109bb576109ba610697565b5b60006109c9848285016106ea565b91505092915050565b6109db816106ff565b82525050565b60006020820190506109f660008301846109d2565b92915050565b600080600080600060a08688031215610a1857610a17610697565b5b6000610a26888289016106ea565b9550506020610a37888289016106ea565b9450506040610a4888828901610720565b935050606086013567ffffffffffffffff811115610a6957610a6861069c565b5b610a75888289016108e0565b9250506080610a8688828901610720565b9150509295509295909350565b610a9c816106c1565b82525050565b6000604082019050610ab76000830185610a93565b610ac460208301846109d2565b9392505050565b6000606082019050610ae06000830186610a93565b610aed6020830185610a93565b610afa60408301846109d2565b949350505050565b6000602082019050610b176000830184610a93565b92915050565b600081519050610b2c81610709565b92915050565b600060208284031215610b4857610b47610697565b5b6000610b5684828501610b1d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b99578082015181840152602081019050610b7e565b83811115610ba8576000848401525b50505050565b6000610bb982610b5f565b610bc38185610b6a565b9350610bd3818560208601610b7b565b610bdc816107d2565b840191505092915050565b60006040820190508181036000830152610c018185610bae565b9050610c1060208301846109d2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c51826106ff565b9150610c5c836106ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c9157610c90610c17565b5b828201905092915050565b6000610ca7826106ff565b9150610cb2836106ff565b925082821015610cc557610cc4610c17565b5b82820390509291505056fea264697066735822122065cb6f96f506c2ce33f81af3decf83b5b2d4dc42391902a36c46e061b618569764736f6c63430008090033";

type ThanksPayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksPayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksPay__factory extends ContractFactory {
  constructor(...args: ThanksPayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dataAddress: PromiseOrValue<string>,
    _partnerWon: PromiseOrValue<string>,
    _workerWon: PromiseOrValue<string>,
    _security: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksPay> {
    return super.deploy(
      dataAddress,
      _partnerWon,
      _workerWon,
      _security,
      overrides || {}
    ) as Promise<ThanksPay>;
  }
  override getDeployTransaction(
    dataAddress: PromiseOrValue<string>,
    _partnerWon: PromiseOrValue<string>,
    _workerWon: PromiseOrValue<string>,
    _security: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      dataAddress,
      _partnerWon,
      _workerWon,
      _security,
      overrides || {}
    );
  }
  override attach(address: string): ThanksPay {
    return super.attach(address) as ThanksPay;
  }
  override connect(signer: Signer): ThanksPay__factory {
    return super.connect(signer) as ThanksPay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksPayInterface {
    return new utils.Interface(_abi) as ThanksPayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksPay {
    return new Contract(address, _abi, signerOrProvider) as ThanksPay;
  }
}
