/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ThanksPayRelay,
  ThanksPayRelayInterface,
} from "../../../../contracts/data/thanksRelay.sol/ThanksPayRelay";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockchainID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "propertyID",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "propertyValue",
        type: "string[]",
      },
    ],
    name: "propertyAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "propertyIDs",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_propertyNames",
        type: "string[]",
      },
    ],
    name: "addProperty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "propertyID",
        type: "uint256",
      },
    ],
    name: "getPropertyName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockchainID",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "propertyIDs",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "propertyValues",
        type: "string[]",
      },
    ],
    name: "setProperty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b9e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806314f7d5f0146100465780631ffa80d014610062578063eb84ff5e1461007e575b600080fd5b610060600480360381019061005b9190610620565b6100ae565b005b61007c600480360381019061007791906106bf565b6100f1565b005b6100986004803603810190610093919061074a565b61018e565b6040516100a59190610812565b60405180910390f35b7ffae5bc2601fc2bb63029893d9b34381dc0a6f9c39e7efd71f1be3ad075ead6b0848484846040516100e39493929190610a0d565b60405180910390a150505050565b60005b815181101561018857600083828151811061011257610111610a60565b5b60200260200101519050600083838151811061013157610130610a60565b5b602002602001015190508060008088815260200190815260200160002060008481526020019081526020016000209080519060200190610172929190610244565b505050808061018090610abe565b9150506100f4565b50505050565b6060600080848152602001908152602001600020600083815260200190815260200160002080546101be90610b36565b80601f01602080910402602001604051908101604052809291908181526020018280546101ea90610b36565b80156102375780601f1061020c57610100808354040283529160200191610237565b820191906000526020600020905b81548152906001019060200180831161021a57829003601f168201915b5050505050905092915050565b82805461025090610b36565b90600052602060002090601f01602090048101928261027257600085556102b9565b82601f1061028b57805160ff19168380011785556102b9565b828001600101855582156102b9579182015b828111156102b857825182559160200191906001019061029d565b5b5090506102c691906102ca565b5090565b5b808211156102e35760008160009055506001016102cb565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61030e816102fb565b811461031957600080fd5b50565b60008135905061032b81610305565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61037f82610336565b810181811067ffffffffffffffff8211171561039e5761039d610347565b5b80604052505050565b60006103b16102e7565b90506103bd8282610376565b919050565b600067ffffffffffffffff8211156103dd576103dc610347565b5b602082029050602081019050919050565b600080fd5b6000610406610401846103c2565b6103a7565b90508083825260208201905060208402830185811115610429576104286103ee565b5b835b81811015610452578061043e888261031c565b84526020840193505060208101905061042b565b5050509392505050565b600082601f83011261047157610470610331565b5b81356104818482602086016103f3565b91505092915050565b600067ffffffffffffffff8211156104a5576104a4610347565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156104d6576104d5610347565b5b6104df82610336565b9050602081019050919050565b82818337600083830152505050565b600061050e610509846104bb565b6103a7565b90508281526020810184848401111561052a576105296104b6565b5b6105358482856104ec565b509392505050565b600082601f83011261055257610551610331565b5b81356105628482602086016104fb565b91505092915050565b600061057e6105798461048a565b6103a7565b905080838252602082019050602084028301858111156105a1576105a06103ee565b5b835b818110156105e857803567ffffffffffffffff8111156105c6576105c5610331565b5b8086016105d3898261053d565b855260208501945050506020810190506105a3565b5050509392505050565b600082601f83011261060757610606610331565b5b813561061784826020860161056b565b91505092915050565b6000806000806080858703121561063a576106396102f1565b5b60006106488782880161031c565b94505060206106598782880161031c565b935050604085013567ffffffffffffffff81111561067a576106796102f6565b5b6106868782880161045c565b925050606085013567ffffffffffffffff8111156106a7576106a66102f6565b5b6106b3878288016105f2565b91505092959194509250565b6000806000606084860312156106d8576106d76102f1565b5b60006106e68682870161031c565b935050602084013567ffffffffffffffff811115610707576107066102f6565b5b6107138682870161045c565b925050604084013567ffffffffffffffff811115610734576107336102f6565b5b610740868287016105f2565b9150509250925092565b60008060408385031215610761576107606102f1565b5b600061076f8582860161031c565b92505060206107808582860161031c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107c45780820151818401526020810190506107a9565b838111156107d3576000848401525b50505050565b60006107e48261078a565b6107ee8185610795565b93506107fe8185602086016107a6565b61080781610336565b840191505092915050565b6000602082019050818103600083015261082c81846107d9565b905092915050565b61083d816102fb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610878816102fb565b82525050565b600061088a838361086f565b60208301905092915050565b6000602082019050919050565b60006108ae82610843565b6108b8818561084e565b93506108c38361085f565b8060005b838110156108f45781516108db888261087e565b97506108e683610896565b9250506001810190506108c7565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006109498261078a565b610953818561092d565b93506109638185602086016107a6565b61096c81610336565b840191505092915050565b6000610983838361093e565b905092915050565b6000602082019050919050565b60006109a382610901565b6109ad818561090c565b9350836020820285016109bf8561091d565b8060005b858110156109fb57848403895281516109dc8582610977565b94506109e78361098b565b925060208a019950506001810190506109c3565b50829750879550505050505092915050565b6000608082019050610a226000830187610834565b610a2f6020830186610834565b8181036040830152610a4181856108a3565b90508181036060830152610a558184610998565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac9826102fb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610afc57610afb610a8f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b4e57607f821691505b60208210811415610b6257610b61610b07565b5b5091905056fea2646970667358221220c1613be04e8083e264079711800d4a98fb2cc983db225868fb53d91eda94449264736f6c63430008090033";

type ThanksPayRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksPayRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksPayRelay__factory extends ContractFactory {
  constructor(...args: ThanksPayRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksPayRelay> {
    return super.deploy(overrides || {}) as Promise<ThanksPayRelay>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ThanksPayRelay {
    return super.attach(address) as ThanksPayRelay;
  }
  override connect(signer: Signer): ThanksPayRelay__factory {
    return super.connect(signer) as ThanksPayRelay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksPayRelayInterface {
    return new utils.Interface(_abi) as ThanksPayRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksPayRelay {
    return new Contract(address, _abi, signerOrProvider) as ThanksPayRelay;
  }
}
