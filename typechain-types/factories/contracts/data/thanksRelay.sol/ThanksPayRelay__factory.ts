/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ThanksPayRelay,
  ThanksPayRelayInterface,
} from "../../../../contracts/data/ThanksRelay.sol/ThanksPayRelay";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "securityAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockchainID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "propertyID",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "propertyValue",
        type: "string[]",
      },
    ],
    name: "propertyAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "propertyIDs",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_propertyNames",
        type: "string[]",
      },
    ],
    name: "addProperty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "propertyID",
        type: "uint256",
      },
    ],
    name: "getPropertyName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entityID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockchainID",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "propertyIDs",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "propertyValues",
        type: "string[]",
      },
    ],
    name: "setProperty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000fcb38038062000fcb833981810160405281019061003491906100df565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061010c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ac82610081565b9050919050565b6100bc816100a1565b81146100c757600080fd5b50565b6000815190506100d9816100b3565b92915050565b6000602082840312156100f5576100f461007c565b5b6000610103848285016100ca565b91505092915050565b610eaf806200011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806314f7d5f0146100465780631ffa80d014610062578063eb84ff5e1461007e575b600080fd5b610060600480360381019061005b9190610804565b6100ae565b005b61007c600480360381019061007791906108a3565b6101e2565b005b6100986004803603810190610093919061092e565b610371565b6040516100a591906109f6565b60405180910390f35b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b815260040161010c9190610a59565b60206040518083038186803b15801561012457600080fd5b505afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610aac565b15151461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019590610b25565b60405180910390fd5b7ffae5bc2601fc2bb63029893d9b34381dc0a6f9c39e7efd71f1be3ad075ead6b0858585856040516101d39493929190610d1e565b60405180910390a15050505050565b336001151560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80836040518263ffffffff1660e01b81526004016102409190610a59565b60206040518083038186803b15801561025857600080fd5b505afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102909190610aac565b1515146102d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c990610b25565b60405180910390fd5b60005b825181101561036a5760008482815181106102f3576102f2610d71565b5b60200260200101519050600084838151811061031257610311610d71565b5b60200260200101519050806001600089815260200190815260200160002060008481526020019081526020016000209080519060200190610354929190610428565b505050808061036290610dcf565b9150506102d5565b5050505050565b606060016000848152602001908152602001600020600083815260200190815260200160002080546103a290610e47565b80601f01602080910402602001604051908101604052809291908181526020018280546103ce90610e47565b801561041b5780601f106103f05761010080835404028352916020019161041b565b820191906000526020600020905b8154815290600101906020018083116103fe57829003601f168201915b5050505050905092915050565b82805461043490610e47565b90600052602060002090601f016020900481019282610456576000855561049d565b82601f1061046f57805160ff191683800117855561049d565b8280016001018555821561049d579182015b8281111561049c578251825591602001919060010190610481565b5b5090506104aa91906104ae565b5090565b5b808211156104c75760008160009055506001016104af565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104f2816104df565b81146104fd57600080fd5b50565b60008135905061050f816104e9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105638261051a565b810181811067ffffffffffffffff821117156105825761058161052b565b5b80604052505050565b60006105956104cb565b90506105a1828261055a565b919050565b600067ffffffffffffffff8211156105c1576105c061052b565b5b602082029050602081019050919050565b600080fd5b60006105ea6105e5846105a6565b61058b565b9050808382526020820190506020840283018581111561060d5761060c6105d2565b5b835b8181101561063657806106228882610500565b84526020840193505060208101905061060f565b5050509392505050565b600082601f83011261065557610654610515565b5b81356106658482602086016105d7565b91505092915050565b600067ffffffffffffffff8211156106895761068861052b565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156106ba576106b961052b565b5b6106c38261051a565b9050602081019050919050565b82818337600083830152505050565b60006106f26106ed8461069f565b61058b565b90508281526020810184848401111561070e5761070d61069a565b5b6107198482856106d0565b509392505050565b600082601f83011261073657610735610515565b5b81356107468482602086016106df565b91505092915050565b600061076261075d8461066e565b61058b565b90508083825260208201905060208402830185811115610785576107846105d2565b5b835b818110156107cc57803567ffffffffffffffff8111156107aa576107a9610515565b5b8086016107b78982610721565b85526020850194505050602081019050610787565b5050509392505050565b600082601f8301126107eb576107ea610515565b5b81356107fb84826020860161074f565b91505092915050565b6000806000806080858703121561081e5761081d6104d5565b5b600061082c87828801610500565b945050602061083d87828801610500565b935050604085013567ffffffffffffffff81111561085e5761085d6104da565b5b61086a87828801610640565b925050606085013567ffffffffffffffff81111561088b5761088a6104da565b5b610897878288016107d6565b91505092959194509250565b6000806000606084860312156108bc576108bb6104d5565b5b60006108ca86828701610500565b935050602084013567ffffffffffffffff8111156108eb576108ea6104da565b5b6108f786828701610640565b925050604084013567ffffffffffffffff811115610918576109176104da565b5b610924868287016107d6565b9150509250925092565b60008060408385031215610945576109446104d5565b5b600061095385828601610500565b925050602061096485828601610500565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109a857808201518184015260208101905061098d565b838111156109b7576000848401525b50505050565b60006109c88261096e565b6109d28185610979565b93506109e281856020860161098a565b6109eb8161051a565b840191505092915050565b60006020820190508181036000830152610a1081846109bd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4382610a18565b9050919050565b610a5381610a38565b82525050565b6000602082019050610a6e6000830184610a4a565b92915050565b60008115159050919050565b610a8981610a74565b8114610a9457600080fd5b50565b600081519050610aa681610a80565b92915050565b600060208284031215610ac257610ac16104d5565b5b6000610ad084828501610a97565b91505092915050565b7f4655434b00000000000000000000000000000000000000000000000000000000600082015250565b6000610b0f600483610979565b9150610b1a82610ad9565b602082019050919050565b60006020820190508181036000830152610b3e81610b02565b9050919050565b610b4e816104df565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b89816104df565b82525050565b6000610b9b8383610b80565b60208301905092915050565b6000602082019050919050565b6000610bbf82610b54565b610bc98185610b5f565b9350610bd483610b70565b8060005b83811015610c05578151610bec8882610b8f565b9750610bf783610ba7565b925050600181019050610bd8565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610c5a8261096e565b610c648185610c3e565b9350610c7481856020860161098a565b610c7d8161051a565b840191505092915050565b6000610c948383610c4f565b905092915050565b6000602082019050919050565b6000610cb482610c12565b610cbe8185610c1d565b935083602082028501610cd085610c2e565b8060005b85811015610d0c5784840389528151610ced8582610c88565b9450610cf883610c9c565b925060208a01995050600181019050610cd4565b50829750879550505050505092915050565b6000608082019050610d336000830187610b45565b610d406020830186610b45565b8181036040830152610d528185610bb4565b90508181036060830152610d668184610ca9565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dda826104df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e0d57610e0c610da0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e5f57607f821691505b60208210811415610e7357610e72610e18565b5b5091905056fea2646970667358221220d19b38ae5d4cdeb5944665ee46e68f84b1a0de2b04030990a2b43bafb0d3ada664736f6c63430008090033";

type ThanksPayRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThanksPayRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThanksPayRelay__factory extends ContractFactory {
  constructor(...args: ThanksPayRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    securityAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ThanksPayRelay> {
    return super.deploy(
      securityAddr,
      overrides || {}
    ) as Promise<ThanksPayRelay>;
  }
  override getDeployTransaction(
    securityAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(securityAddr, overrides || {});
  }
  override attach(address: string): ThanksPayRelay {
    return super.attach(address) as ThanksPayRelay;
  }
  override connect(signer: Signer): ThanksPayRelay__factory {
    return super.connect(signer) as ThanksPayRelay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThanksPayRelayInterface {
    return new utils.Interface(_abi) as ThanksPayRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThanksPayRelay {
    return new Contract(address, _abi, signerOrProvider) as ThanksPayRelay;
  }
}
