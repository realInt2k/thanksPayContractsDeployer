So when we call some blockchain function, an event will be emited, and DB will somehow changed. The
implementation in which how the DB change I've no idea.
But preferably, I'll do the task of calling the blockchain function, then call a call-back function provided by you.


The call-back function will accept event's data/information, and do the job of changing the DB.
  
  [
  {
    "explain" : "partner with partner's id ${pId} will have its balance changed to 'newBalance' ",
    "implementation" : "totally dependent on you, you can update entry in existing table",
    "tableName": "partnerBalanceChanged",
    "fields": [
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "newBalance"
      }
    ]
  },
  {
    "explain":"new, never seen before partner was registered from front-end => need to update Partner's table i.e: add new entry?",
    "implementation": "in the new entry, at least 2 columns: partnerId and LatestPay should be the same as received info",
    "tableName": "partnerRegistered",
    "fields": [
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "latestPay"
      }
    ]
  },
  {
    "explain": "same explanation as partnerBalanceChanged but applied for worker",
    "tableName": "workerBalanceChanged",
    "fields": [
      {
        "type": "uint256",
        "name": "wId"
      },
      {
        "type": "uint256",
        "name": "newBalance"
      }
    ]
  },
  {
    "explain": "same explanation as partnerRegistered",
    "tableName": "workerRegistered",
    "fields": [
      {
        "type": "uint256",
        "name": "wId"
      },
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "wage"
      }
    ]
  }
][
  {
    "explain" : "this will be used for logging, you can make a column in each partner table's entry refering to an array of all the balance updates relating to such entry",
    "tableName": "partnerAddBalanceEvent",
    "fields": [
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "amount"
      },
      {
        "type": "uint256",
        "name": "timestamp"
      }
    ]
  },
  {
    "explain" : "this will be used for logging, you can make another column in each partner table's entry refering to an array of all the bonus updates relating to such entry",
    "explain2" : {
      "." : "but also, you should make a colum showing the sumation of all the bonus such partner receive"
    },
    "tableName": "partnerAddBonusEvent",
    "fields": [
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "amount"
      },
      {
        "type": "uint256",
        "name": "timestamp"
      }
    ]
  },
  {
    "explain" : {
      "." : "decreases such partner's balance by amount"
    }
    "tableName": "partnerWithdrawEvent",
    "fields": [
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "amount"
      },
      {
        "type": "uint256",
        "name": "timestamp"
      }
    ]
  },
  {
    "explain" : {
      "." : "another column named latestWagePay in which the value is unix time-stamp (number)",
      "." : "this latest pay will be updated each month manually, and it's a key in worker's balance withdrawal procedure"
    }
    "tableName": "setLatestWagePayEvent",
    "fields": [
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "timestamp"
      }
    ]
  },
  {
    "explain" : {
      "." : "worker's withdraw-able salary will be decreased by such amount",
      "." : "another column in worker's table denoting when was the latest transaction it made? preferable number (unix timestamp)"
    }
    "tableName": "workerGetsThanksPayEvent",
    "fields": [
      {
        "type": "uint256",
        "name": "wId"
      },
      {
        "type": "uint256",
        "name": "pId"
      },
      {
        "type": "uint256",
        "name": "amount"
      },
      {
        "type": "string",
        "name": "bankReceipt"
      },
      {
        "type": "uint256",
        "name": "timestamp"
      }
    ]
  }
]


// don't care about this for now:

[
  {
    "tableName": "dynamicPropertySet",
    "fields": [
      {
        "type": "uint256",
        "name": "entityID"
      },
      {
        "type": "uint256",
        "name": "blockchainID"
      },
      {
        "type": "uint256[]",
        "name": "propertyID"
      },
      {
        "type": "uint256[]",
        "name": "propertyValue"
      }
    ]
  },
  {
    "tableName": "entityNamesAltered",
    "fields": [
      {
        "type": "uint256[]",
        "name": "_entityIDs"
      },
      {
        "type": "string[]",
        "name": "_entityNames"
      }
    ]
  },
  {
    "tableName": "propertyNamesAltered",
    "fields": [
      {
        "type": "uint256",
        "name": "entityID"
      },
      {
        "type": "uint256[]",
        "name": "propertyIDs"
      },
      {
        "type": "string[]",
        "name": "propertyNames"
      },
      {
        "type": "uint256[]",
        "name": "propertyTypes"
      }
    ]
  },
  {
    "tableName": "staticPropertySet",
    "fields": [
      {
        "type": "uint256",
        "name": "entityID"
      },
      {
        "type": "uint256",
        "name": "blockchainID"
      },
      {
        "type": "uint256[]",
        "name": "propertyID"
      },
      {
        "type": "string[]",
        "name": "propertyValue"
      }
    ]
  }
][]