import { BigInt, BigDecimal, Bytes, Address } from "@graphprotocol/graph-ts";

import {
  LeagueMaker,
  OwnershipTransferred,
  leagueIsDoneEvent,
  leagueIsWaitingEvent,
  leagueIsPlayingEvent,
  leagueJoined, 
  prizeClaimed,
  leagueIsCancelledEvent,
  sendMoneyEvent
} from "../generated/LeagueMaker/LeagueMaker"

import { concat } from "@graphprotocol/graph-ts/helper-functions";

import { Game, League, Prize, LeaguePlayer, User, Log, AllLog, WithDrawLog } from '../generated/schema';
import { blockPlayerEvent, unBlockPlayerEvent, setAdminStateEvent, TransferOwnershipCall } from '../generated/LeagueMaker/LeagueMaker';


// BigNumber-like references
let ZERO_BI = BigInt.fromI32(0);
let ONE_BI = BigInt.fromI32(1);
let ZERO_BD = BigDecimal.fromString("0");
const noName = "no_name";

// this function returns all the logs
function getAllLog(): AllLog
{
  let allLog = AllLog.load("suka");
  if(allLog == null) 
  {
    allLog = new AllLog("suka");
    let logs = allLog.logs;
    allLog.nextId = 0;
    // make a starting log
    let log = new Log(allLog.nextId.toString());    
    log.log = "start logging";
    log.save();
    // push the new starting log to allLog
    logs.push(log.id);
    allLog.logs = logs;
    allLog.nextId = allLog.nextId + 1;
    allLog.save();
  }
  return allLog;
}

function saveNewLog(str:string):void {
  let allLog = getAllLog();
  // make a starting log
  let log = new Log(allLog.nextId.toString());    
  log.log = " " + str;
  log.save();
  // push the new starting log to allLog
  //let logs = allLog.logs;
  let newLogs:string[] = []; // make an empty log field
  newLogs.push(log.id);
  let i = allLog.nextId - 1;
  let cnt = 0;
  while(i >= 0 && cnt < 9) // load the 8 latest log
  {
    log = Log.load(i.toString()) as Log;
    newLogs.push(log.id);
    cnt ++;
    i --;
  }
  allLog.logs = newLogs;
  allLog.nextId = allLog.nextId + 1;
  allLog.save();
}

export function handleSendMoneyEvent(event: sendMoneyEvent): void {
  saveNewLog("sendMoneyEvent: from " + event.params._from.toHexString() + " to " + event.params._to.toHexString() + " amount " + event.params._amount.toString());
  let fromUser = User.load(event.params._from.toHexString());
  let toUser = User.load(event.params._to.toHexString());
  const amount = event.params._amount;
  if(!toUser)
  {
    let newUser = new User(event.params._to.toHexString());
    newUser.address = event.params._to.toHexString();
    newUser.name = noName;
    newUser.adminLevel = 0;
    newUser.withDrawLogIndex = 0;
    newUser.isBlocked = false;
    newUser.save();
  }
  if(!fromUser)
  {
    saveNewLog("sendMoneyEvent: fromUser not found");
    return;
  }
  fromUser.withDrawLogIndex = fromUser.withDrawLogIndex + 1;
  fromUser.save();
  let newWithDrawLog = new WithDrawLog(fromUser.address + fromUser.withDrawLogIndex.toString());
  newWithDrawLog.amount = amount;
  newWithDrawLog.from = event.params._from.toHexString();
  newWithDrawLog.to = event.params._to.toHexString();
  newWithDrawLog.createdAt = event.params._time;
  newWithDrawLog.save();
}

/**
 * 
 * @param event _leagueId(BigInt) _time(BigInt) _byAdmin(address)
 */
export function handleLeagueIsCancelledEvent(event: leagueIsCancelledEvent): void
{ 
  let league = League.load(event.params._leagueId.toHexString());
  if(league)
  {
    league.status = "canceled";
    league.closeTime = event.params._time;
    league.save();
  }
}

export function handleSetAdminStateEvent(event: setAdminStateEvent): void {
  
  const userAddr = event.params.userAddr as Address;
  const state = event.params.state.toI32();
  const logMsg1 = "setting " + userAddr.toHexString().toLowerCase() + " to admin state: " + state.toString();
  saveNewLog(logMsg1);
  const user = User.load(userAddr.toHexString().toLowerCase());
  
  if(user)
  {
    user.adminLevel = state;
    user.name = event.params._name;
    user.save();
  } else 
  {
    saveNewLog("is Admin is " + state.toString());
    let newUser = new User(userAddr.toHexString().toLowerCase());
    newUser.address = userAddr.toHexString().toLowerCase();
    newUser.adminLevel = state;
    newUser.totalLeagues = BigInt.fromI32(0);
    newUser.name = event.params._name;
    newUser.withDrawLogIndex = 0;
    newUser.save();
  }
}

export function handleBlockPlayerEvent(event: blockPlayerEvent): void {
  const logMsg1 = "blocking " +  event.params._leagueId.toString() + " " + event.params._name.toString();
  saveNewLog(logMsg1);
  let league = League.load(event.params._leagueId.toString());
  if(league)
  {
    let leaguePlayer = LeaguePlayer.load(event.params._leagueId.toString() + event.params._name);
    if(leaguePlayer)
    {
      const logMsg2 = "loaded player in league " + event.params._leagueId.toString() + " name: " +  event.params._name;
      saveNewLog(logMsg2);
      leaguePlayer.isBlocked = ! leaguePlayer.isBlocked;
      leaguePlayer.save();
      let user = User.load(leaguePlayer.user as string);
      if(user)
      {
        user.isBlocked = true;
        user.save();
        const logMsg4 = "blocked user " + (user.address as string);
        saveNewLog(logMsg4);
      }
    }
  } else {
    const logMsg3 = "WHAT THE FUCK can't load league to block player?";
    saveNewLog(logMsg3);
  }
}

export function handleUnBlockPlayerEvent(event: unBlockPlayerEvent): void {
  const logMsg1 = "unBlocking " +  event.params._leagueId.toString() + " " + event.params._name.toString();
  saveNewLog(logMsg1);
  let league = League.load(event.params._leagueId.toString());
  if(league)
  {
    let leaguePlayer = LeaguePlayer.load(event.params._leagueId.toString() + event.params._name);
    if(leaguePlayer)
    {
      const logMsg2 = "loaded player in league " + event.params._leagueId.toString() + " name: " +  event.params._name;
      saveNewLog(logMsg2);
      leaguePlayer.isBlocked = ! leaguePlayer.isBlocked;
      leaguePlayer.save();
      let user = User.load(leaguePlayer.user as string);
      if(user)
      {
        user.isBlocked = false;
        user.save();
        const logMsg4 = "unblocked user " + (user.address as string);
        saveNewLog(logMsg4);
      }
    }
  } else {
    const logMsg3 = "WHAT THE FUCK can't load league to block player?";
    saveNewLog(logMsg3);
  }
}

// an Admin created this league
export function handleLeagueIsWaitingEvent(event: leagueIsWaitingEvent): void {
  let league = new League(event.params._leagueId.toString());
  league.adminMadeCreateAccount = event.params._byAdmin.toHexString();
  let game = Game.load(event.params._gameName.toString());
  if (game === null){
    game = new Game(event.params._gameName.toString());
    game.name = event.params._gameName.toString();
  }
  league.game = game.id;

  league.totalPlayers = ZERO_BI;
  league.totalPrize = ZERO_BI; 


  league.minEntry = event.params._minEntry;
  
  league.openTime = event.params._openTime;
  league.liveTime = event.params._liveTime;
  league.closeTime = event.params._closeTime;
  league.status = "Waiting";

  game.save();
  league.save();
}

export function handleLeagueIsPlayingEvent(event: leagueIsPlayingEvent): void {
  let league = League.load(event.params._leagueId.toString());
  if (league){
    league.adminMadeLiveAccount = event.params._byAdmin.toHexString();
    league.status = "Playing";
    league.save();
  }

}

export function handleLeagueJoined(event: leagueJoined): void{
  let leaguePlayer = new LeaguePlayer(event.params._leagueId.toString() + event.params._nickName.toString());
  leaguePlayer.nickName = event.params._nickName;
  leaguePlayer.joinedAt = event.params._time;
  leaguePlayer.isBlocked = event.params.isBlocked;
  let user = User.load(event.params._pAddress.toHexString().toLowerCase());
  if (user === null){

    user = new User(event.params._pAddress.toHexString().toLowerCase());
    user.address = event.params._pAddress.toHexString().toLowerCase();
    user.totalLeagues = ONE_BI;
    user.isBlocked = event.params.isBlocked;
    user.withDrawLogIndex = 0;
    user.name = noName;
  }else{
    let totallgs: BigInt = user.totalLeagues as BigInt;
    user.totalLeagues = totallgs.plus(ONE_BI);
  }
  if(user){
    leaguePlayer.user = user.id;
    user.totalLeaguesWinner = ZERO_BI;
  } else {
    user.adminLevel = 0;
  }
  let league = League.load(event.params._leagueId.toString());
  if (league){
    if(league.totalPlayers)
      league.totalPlayers = (league.totalPlayers as BigInt).plus(ONE_BI);
    let _minEntry: BigInt = league.minEntry as BigInt;
    // increase leagueTotalPrize
    if(_minEntry < BigInt.fromI32(100))
    {
      let amt = (_minEntry.times(BigInt.fromI32(100))).div(BigInt.fromI32(100)).times(BigInt.fromI32(80));
      amt = amt.div(BigInt.fromI32(100));
      league.totalPrize = (league.totalPrize as BigInt).plus(amt);
    } else {
      league.totalPrize = (league.totalPrize as BigInt).plus(_minEntry.div(BigInt.fromI32(100)).times(BigInt.fromI32(80)));
    }
    league.save();
    leaguePlayer.league = league.id;
  }
  user.save();
  leaguePlayer.save();
  user.save();
}

export function handleLeagueIsDoneEvent(event: leagueIsDoneEvent): void {
  let league = League.load(event.params._leagueId.toString());
  if (league){
    league.adminMadeClosedAccount = event.params._byAdmin.toHexString();
    league.status = "Done";
  }
  let wnrs = event.params._winners;
  for(let i =0; i < wnrs.length; i++){
    let prize = new Prize(event.params._leagueId.toString() + wnrs[i].toString());
    if (league){
    prize.league = league.id;
    }
    prize.amount = event.params._prizePerParticipant;
    prize.createdAt = event.params._time;
    let leaguePlayer = LeaguePlayer.load(event.params._leagueId.toString() + wnrs[i]);
    if(leaguePlayer){
      leaguePlayer.isWinner = true;
      let str: string = leaguePlayer.user as string;
      let user = User.load(str.toLowerCase());
      if (user){
        prize.claimableBy = user.id;
        if (user.totalLeaguesWinner){
          let total: BigInt = user.totalLeaguesWinner as BigInt;
          user.totalLeaguesWinner = total.plus(ONE_BI);
        }
        user.save();
      }
      leaguePlayer.save();
    }
    prize.claimed = false;
    if(prize){
      prize.save();
    }
    }
}

export function handlePrizeClaimed(event: prizeClaimed): void{
  let prize = Prize.load(event.params._leagueId.toString() + event.params._nickName.toString());
  if (prize){
    prize.claimed = true; 
    prize.claimedAt = event.params._time;
    prize.save();
  }
}